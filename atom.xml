<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>来呀，不服抓个包~~</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wangjibao.com.cn/"/>
  <updated>2018-10-20T11:54:31.951Z</updated>
  <id>https://wangjibao.com.cn/</id>
  
  <author>
    <name>大宝哥spring</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode21-30</title>
    <link href="https://wangjibao.com.cn/2018/10/20/LeetCode21-30/"/>
    <id>https://wangjibao.com.cn/2018/10/20/LeetCode21-30/</id>
    <published>2018-10-20T11:51:57.000Z</published>
    <updated>2018-10-20T11:54:31.951Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="LeetCode" scheme="https://wangjibao.com.cn/categories/LeetCode/"/>
    
      <category term="LeetCode21-30" scheme="https://wangjibao.com.cn/categories/LeetCode/LeetCode21-30/"/>
    
    
      <category term="LeetCode" scheme="https://wangjibao.com.cn/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>背包九讲</title>
    <link href="https://wangjibao.com.cn/2018/10/17/%E8%83%8C%E5%8C%85%E4%B9%9D%E8%AE%B2/"/>
    <id>https://wangjibao.com.cn/2018/10/17/背包九讲/</id>
    <published>2018-10-17T08:51:14.000Z</published>
    <updated>2018-10-20T11:51:11.633Z</updated>
    
    <content type="html"><![CDATA[<p>大二入门动态规划时，最先学得就是 <code>LCS</code> , <code>LIS</code> 和各种背包问题，后来接触二维DP和各种无厘头DP（数位DP啊，插头DP啊，状压DP啊，树状DP啊等等），以我这种智商水平，听听名字就好了。最近的算法课讲到了 <code>DP</code> 专题，找出了之前看的 <code>背包九讲</code>看了看，放出来，纪念一发当年的岁月吧。</p><div class="row">    <embed src="背包九讲.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;大二入门动态规划时，最先学得就是 &lt;code&gt;LCS&lt;/code&gt; , &lt;code&gt;LIS&lt;/code&gt; 和各种背包问题，后来接触二维DP和各种无厘头DP（数位DP啊，插头DP啊，状压DP啊，树状DP啊等等），以我这种智商水平，听听名字就好了。最近的算法课讲到了 &lt;code
      
    
    </summary>
    
      <category term="资料" scheme="https://wangjibao.com.cn/categories/%E8%B5%84%E6%96%99/"/>
    
    
      <category term="资料" scheme="https://wangjibao.com.cn/tags/%E8%B5%84%E6%96%99/"/>
    
      <category term="算法课" scheme="https://wangjibao.com.cn/tags/%E7%AE%97%E6%B3%95%E8%AF%BE/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu中配置SS多用户模式并限制每个用户的流量</title>
    <link href="https://wangjibao.com.cn/2018/10/12/Ubuntu%E4%B8%AD%E9%85%8D%E7%BD%AESS%E5%A4%9A%E7%94%A8%E6%88%B7%E6%A8%A1%E5%BC%8F%E5%B9%B6%E9%99%90%E5%88%B6%E6%AF%8F%E4%B8%AA%E7%94%A8%E6%88%B7%E7%9A%84%E6%B5%81%E9%87%8F/"/>
    <id>https://wangjibao.com.cn/2018/10/12/Ubuntu中配置SS多用户模式并限制每个用户的流量/</id>
    <published>2018-10-12T12:40:14.000Z</published>
    <updated>2018-10-12T13:05:44.919Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、更新软件并安装vim"><a href="#1、更新软件并安装vim" class="headerlink" title="1、更新软件并安装vim"></a>1、更新软件并安装vim</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br><span class="line">sudo apt-get install vim</span><br></pre></td></tr></table></figure><h3 id="2、更改-SSH-默认端口"><a href="#2、更改-SSH-默认端口" class="headerlink" title="2、更改 SSH 默认端口"></a>2、更改 SSH 默认端口</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/ssh/sshd_config</span><br><span class="line">找到 Port 字段，将其修改为自己想要的端口值</span><br><span class="line">sudo service ssh restart         #重启ssh服务</span><br><span class="line">sudo netstat -tunlp | grep ssh   #查看ssh服务监听的端口</span><br></pre></td></tr></table></figure><p>这里将ssh端口改成了22222，如下图（PS:不要问我为啥强行改22号端口，就是任性，额，其实有点其他用途，青大校友表示当年我就是靠这个强行免费使用校园网）：</p><p><img src="/2018/10/12/Ubuntu中配置SS多用户模式并限制每个用户的流量/ssh.png" alt=""></p><h3 id="3、安装shadowsocks-python版本"><a href="#3、安装shadowsocks-python版本" class="headerlink" title="3、安装shadowsocks-python版本"></a>3、安装shadowsocks-python版本</h3><a id="more"></a><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python-pip</span><br><span class="line"><span class="meta">#</span>在ubuntu16.04中，可以通过pip安装pyhon版的shadowsocks，但是好像已经不维护更新了，停留在了2.8.2版本</span><br><span class="line">sudo pip install shadowsocks</span><br></pre></td></tr></table></figure><p>然后创建一个 <code>json</code> 文件并在其中填写个人配置信息即可，比如在 <code>/home/my_ss_config.json</code> 中，填写如下信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">"server" : "your_server_ip",     #自己服务器的IP</span><br><span class="line">"server_port" : 8388,            #服务器端口</span><br><span class="line">"local_address" : "127.0.0.1", </span><br><span class="line">"local_port" : 1080, </span><br><span class="line">"password" : "yourpassword",     #密码</span><br><span class="line">"timeout" : 300, </span><br><span class="line">"method" : "aes-256-cfb"         #加密方式</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要更改后面带 <code>#</code> 号的一些字段值即可，如果想多用户的话，可以将 <code>password</code> 字段改成如下模式（ss使用端口值识别不同的用户）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"port_password": &#123;</span><br><span class="line">"端口1": "密码1",</span><br><span class="line">"端口2": "密码2"</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>一切准备就绪，接下来使用如下命令即可运行 SS 服务，实现 <code>Cross the Great Fire Wall</code> 。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ssserver -c /home/my_ss_config.json -d start</span><br></pre></td></tr></table></figure><h3 id="4、多用户模式流量统计"><a href="#4、多用户模式流量统计" class="headerlink" title="4、多用户模式流量统计"></a>4、多用户模式流量统计</h3><p>说一下我为啥要搞这么个功能，前天，我TM大半夜的正嗨呢，突然，网断了！于是乎，打开4G，还是无法操作，这。。。。<del>我手纸都准备好了</del>，竟然发生这样的事？（开玩笑，哈哈，根正苗红的科研知识分子，油管看科研视频的好吧，为科研奉献全身！）收到邮件，告诉我流量用完了，呵。。。</p><p><img src="/2018/10/12/Ubuntu中配置SS多用户模式并限制每个用户的流量/bandwidth.png" alt=""></p><p>于是乎，大家公用的情况下，私开个个人账号，每到月末的时候应急用。于是乎用到了上面讲到的多用户模式，但是这样还不行，为每个用户限制流量使用上限才能达到目的。</p><p>找了找，发现国内的某度关于这方面是真的干净，上某歌，查到可以使用 <code>ss-bash</code> 实现，<a href="https://github.com/hellofwy/ss-bash" target="_blank" rel="noopener">github上有</a>，实现的原理就是：<code>不同的用户分配不同端口，使用iptables规则获取各端口的流量，脚本循环运行，在固定时间间隔根据iptables结果统计流量使用情况，并在流量超过限制时，添加对应端口的iptables reject规则以禁用端口。</code></p><p>安装shadowsocks与ss-bash之后，shadowsocks就不用做任何配置了，省去了上面的步骤，由ss-bash管理shadowsocks，包括配置的文件等等。有个缺点就是，ss-bash目前只支持python版Shadowsocks，只支持统计ipv4流量，但这问题影响不大。</p><p>执行如下指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">apt-get install unzip       #下载解压工具</span><br><span class="line">apt-get install bc          #安装计算器，后面统计流量用</span><br><span class="line">wget https://github.com/hellofwy/ss-bash/archive/master.zip   #下载软件包</span><br><span class="line">unzip master.zip</span><br><span class="line">cd ss-bash-master/</span><br></pre></td></tr></table></figure><p>现在就可以使用相关命令配置 SS 了，具体操作指令如下（可通过 <code>./ssadmin.sh</code> 命令查看）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">用法：</span><br><span class="line">    显示版本：</span><br><span class="line">        ssadmin.sh -v|v|version</span><br><span class="line">    显示帮助：</span><br><span class="line">        ssadmin.sh [-h|h|help]</span><br><span class="line">    启动ss:</span><br><span class="line">        ssadmin.sh start</span><br><span class="line">    停止ss：</span><br><span class="line">        ssadmin.sh stop</span><br><span class="line">    查看ss状态：</span><br><span class="line">        ssadmin.sh status</span><br><span class="line">    重启ss：</span><br><span class="line">        ssadmin.sh restart</span><br><span class="line">    软重启ss：</span><br><span class="line">        ssadmin.sh soft_restart</span><br><span class="line">        在不影响现有连接的情况下重启ss服务。用于ss服务参数修改，</span><br><span class="line">        和手动直接修改配置文件后，重启ss服务。</span><br><span class="line">    添加用户：</span><br><span class="line">        ssadmin.sh add port passwd limit</span><br><span class="line">            port：端口号, 0&lt;port&lt;=65535</span><br><span class="line">            passwd：密码, 不能有空格，引号等字符</span><br><span class="line">            limit：流量限制，可以用K/M/G/T、KB/MB/GB/TB等（不区</span><br><span class="line">                   分大小写）。支持小数。比如10.5G、10.5GB等。</span><br><span class="line">                   1KB=1024 bytes，以此类推。</span><br><span class="line">        示例： ssadmin.sh add 3333 abcde 10.5G</span><br><span class="line">    显示用户流量信息：</span><br><span class="line">        ssadmin.sh show port</span><br><span class="line">    显示所有用户流量信息：</span><br><span class="line">        ssadmin.sh show</span><br><span class="line">    显示用户密码信息：</span><br><span class="line">        ssadmin.sh showpw port</span><br><span class="line">    显示所有用户密码信息：</span><br><span class="line">        ssadmin.sh showpw</span><br><span class="line">    删除用户：</span><br><span class="line">        ssadmin.sh del port</span><br><span class="line">    修改用户：</span><br><span class="line">        ssadmin.sh change port passwd limit</span><br><span class="line">    修改用户密码：</span><br><span class="line">        ssadmin.sh cpw port passwd</span><br><span class="line">    修改用户流量限制：</span><br><span class="line">        ssadmin.sh clim port limit</span><br><span class="line">    修改所有用户流量限制：</span><br><span class="line">        ssadmin.sh change_all_limit limit</span><br><span class="line">    用户流量使用量置零：</span><br><span class="line">        ssadmin.sh rused limit</span><br><span class="line">    所有用户流量使用量置零：</span><br><span class="line">        ssadmin.sh reset_all_used</span><br><span class="line">    用户流量限制置零：</span><br><span class="line">        ssadmin.sh rlim port</span><br><span class="line">    全部用户流量限制置零：</span><br><span class="line">        ssadmin.sh reset_all_limit</span><br><span class="line">    显示已添加的iptables规则：</span><br><span class="line">        ssadmin.sh lrules</span><br></pre></td></tr></table></figure><p>添加完账户后，<code>./ssadmin.sh start</code>启动后，<code>./ssadmin.sh show</code> 即可查看每个用户的当前流量使用情况。如下图：</p><p><img src="/2018/10/12/Ubuntu中配置SS多用户模式并限制每个用户的流量/show.png" alt=""></p><p><code>ssadmin</code>文件夹中的各个文件的含义如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ssadmin.sh      #管理程序，所有命令通过该程序执行</span><br><span class="line">sscounter.sh    #流量统计程序。由ssadmin.sh自动调用执行，注意：不要手动运行该程序</span><br><span class="line">sshelp</span><br><span class="line">sslib.sh        #包含一些参数配置和流量统计函数。由ssadmin.sh自动调用执行，注意：不要手动运行该程序</span><br><span class="line">ssmlt.json      #根据用户列表和ssmlt.template生成的ssserver实际使用的配置文件</span><br><span class="line">ssmlt.template  #ssserver的配置文件</span><br><span class="line">sstraffic       #用户流量使用情况，包括流量限制，已用流量，剩余流量等。ssadmin.sh show 命令，显示该文件内容。</span><br><span class="line">ssusers         #用户列表</span><br><span class="line">traffic.log     #用户流量记录，供程序内部使用。</span><br></pre></td></tr></table></figure><p>备注：</p><p>1、默认的流量采样间隔为5分钟，流量间隔可根据实际需求调整，但最好不要太小，比如小于10秒。可打开文件<code>sslib.sh</code> ，修改<code>INTERVEL</code> 的值，单位为秒。</p><p>2、如果shadowsocks不是使用apt-get或者pip安装，无法自动找到 <code>ssserver</code> 文件时，请手动指定程序的具体位置。打开文件 <code>sslib.sh</code> ，修改 <code>SSSERVER</code> 的值，比如 <code>ssserver</code> 的路径为 <code>/usr/local/bin/ssserver</code> 时，修改为:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SSSERVER=/usr/local/bin/ssserver</span><br></pre></td></tr></table></figure><h3 id="5、To-Do-List"><a href="#5、To-Do-List" class="headerlink" title="5、To Do List"></a>5、To Do List</h3><p>既然身为抓包组里的一员，就要干点抓包相关的事，是不是。比如说，十分好奇为啥大家流量用得那么多呢，肯定看视频了，看啥视频了呢，<code>奥特曼大战葫芦娃.avi</code> ？初步打算在服务器上进行流量采样，比如万分之一的采样率，然后记录下对应账户的 <code>DNS</code>请求的 <code>query</code> 字段值，<code>client hello</code>中的<code>SNI</code>字段等。</p><p>最近比较忙（<del>其实就是懒</del>），回头抽空搞一发。。。嘻嘻</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、更新软件并安装vim&quot;&gt;&lt;a href=&quot;#1、更新软件并安装vim&quot; class=&quot;headerlink&quot; title=&quot;1、更新软件并安装vim&quot;&gt;&lt;/a&gt;1、更新软件并安装vim&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get update&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get upgrade&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install vim&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;2、更改-SSH-默认端口&quot;&gt;&lt;a href=&quot;#2、更改-SSH-默认端口&quot; class=&quot;headerlink&quot; title=&quot;2、更改 SSH 默认端口&quot;&gt;&lt;/a&gt;2、更改 SSH 默认端口&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo vim /etc/ssh/sshd_config&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;找到 Port 字段，将其修改为自己想要的端口值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo service ssh restart         #重启ssh服务&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo netstat -tunlp | grep ssh   #查看ssh服务监听的端口&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里将ssh端口改成了22222，如下图（PS:不要问我为啥强行改22号端口，就是任性，额，其实有点其他用途，青大校友表示当年我就是靠这个强行免费使用校园网）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2018/10/12/Ubuntu中配置SS多用户模式并限制每个用户的流量/ssh.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;3、安装shadowsocks-python版本&quot;&gt;&lt;a href=&quot;#3、安装shadowsocks-python版本&quot; class=&quot;headerlink&quot; title=&quot;3、安装shadowsocks-python版本&quot;&gt;&lt;/a&gt;3、安装shadowsocks-python版本&lt;/h3&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://wangjibao.com.cn/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="https://wangjibao.com.cn/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode11-20</title>
    <link href="https://wangjibao.com.cn/2018/10/09/LeetCode11-20/"/>
    <id>https://wangjibao.com.cn/2018/10/09/LeetCode11-20/</id>
    <published>2018-10-09T12:45:18.000Z</published>
    <updated>2018-10-20T11:50:02.502Z</updated>
    
    <content type="html"><![CDATA[<h2 id="11、盛最多水的容器"><a href="#11、盛最多水的容器" class="headerlink" title="11、盛最多水的容器"></a>11、<a href="https://leetcode-cn.com/problems/container-with-most-water" target="_blank" rel="noopener">盛最多水的容器</a></h2><p>双指针，算法中一个很重要的技巧，之前的三数求和就用到了双指针的技巧。</p><p>我们在由线段长度构成的数组中使用两个指针，一个放在开始，一个置于末尾。 此外，我们会使用变量 <code>maxArea</code> 来持续存储到目前为止所获得的最大面积。 在每一步中，我们会找出指针所指向的两条线段形成的区域，更新 <code>maxArea</code>，并将指向较短线段的指针向较长线段那端移动一步。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> maxArea = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> frontPoint = <span class="number">0</span>, endPoint = height.size()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>( frontPoint&lt;endPoint )&#123;</span><br><span class="line">            maxArea = max( maxArea, (endPoint-frontPoint)*min(height[frontPoint], height[endPoint]) );</span><br><span class="line">            <span class="keyword">if</span>( height[frontPoint]&lt;height[endPoint] )</span><br><span class="line">                frontPoint++;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                endPoint--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxArea;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="12、整数转罗马数字"><a href="#12、整数转罗马数字" class="headerlink" title="12、整数转罗马数字"></a>12、<a href="https://leetcode-cn.com/problems/integer-to-roman" target="_blank" rel="noopener">整数转罗马数字</a></h2><p>水题一个，模拟一下即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">intToRoman</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt; pair&lt;<span class="keyword">int</span>,<span class="built_in">string</span>&gt; &gt; mp;</span><br><span class="line">        mp.push_back( make_pair(<span class="number">1000</span>,<span class="string">"M"</span>) );</span><br><span class="line">        mp.push_back( make_pair(<span class="number">900</span>,<span class="string">"CM"</span>) );</span><br><span class="line">        mp.push_back( make_pair(<span class="number">500</span>,<span class="string">"D"</span>) );</span><br><span class="line">        mp.push_back( make_pair(<span class="number">400</span>,<span class="string">"CD"</span>) );</span><br><span class="line">        mp.push_back( make_pair(<span class="number">100</span>,<span class="string">"C"</span>) );</span><br><span class="line">        mp.push_back( make_pair(<span class="number">90</span>,<span class="string">"XC"</span>) );</span><br><span class="line">        mp.push_back( make_pair(<span class="number">50</span>,<span class="string">"L"</span>) );</span><br><span class="line">        mp.push_back( make_pair(<span class="number">40</span>,<span class="string">"XL"</span>) );</span><br><span class="line">        mp.push_back( make_pair(<span class="number">10</span>,<span class="string">"X"</span>) );</span><br><span class="line">        mp.push_back( make_pair(<span class="number">9</span>,<span class="string">"IX"</span>) );</span><br><span class="line">        mp.push_back( make_pair(<span class="number">5</span>,<span class="string">"V"</span>) );</span><br><span class="line">        mp.push_back( make_pair(<span class="number">4</span>,<span class="string">"IV"</span>) );</span><br><span class="line">        mp.push_back( make_pair(<span class="number">1</span>,<span class="string">"I"</span>) );</span><br><span class="line">        <span class="built_in">string</span> ans = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span>( <span class="built_in">vector</span>&lt; pair&lt;<span class="keyword">int</span>,<span class="built_in">string</span>&gt; &gt;:: iterator it = mp.begin(); it!=mp.end(); it++ )&#123;</span><br><span class="line">            <span class="keyword">while</span>( num&gt;=(*it).first )&#123;</span><br><span class="line">                ans += (*it).second;</span><br><span class="line">                num -= (*it).first;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="13、罗马数字转整数"><a href="#13、罗马数字转整数" class="headerlink" title="13、罗马数字转整数"></a>13、<a href="https://leetcode-cn.com/problems/roman-to-integer" target="_blank" rel="noopener">罗马数字转整数</a></h2><p>水题，直接模拟</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; mp;</span><br><span class="line">        mp[<span class="string">'I'</span>] = <span class="number">1</span>, mp[<span class="string">'V'</span>] = <span class="number">5</span>, mp[<span class="string">'X'</span>] = <span class="number">10</span>, mp[<span class="string">'L'</span>] = <span class="number">50</span>;</span><br><span class="line">        mp[<span class="string">'C'</span>] = <span class="number">100</span>, mp[<span class="string">'D'</span>] = <span class="number">500</span>, mp[<span class="string">'M'</span>] = <span class="number">1000</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nums;</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> i=<span class="number">0</span>; i&lt;s.length(); i++ )</span><br><span class="line">            nums.push_back( mp[s[i]] );</span><br><span class="line">        nums.push_back(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.size()<span class="number">-1</span>; i++ )&#123;</span><br><span class="line">            <span class="keyword">if</span>( nums[i]&lt;nums[i+<span class="number">1</span>] )&#123;</span><br><span class="line">                ans += nums[i+<span class="number">1</span>]-nums[i];</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                ans += nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="14、最长公共前缀"><a href="#14、最长公共前缀" class="headerlink" title="14、最长公共前缀"></a>14、<a href="https://leetcode-cn.com/problems/longest-common-prefix" target="_blank" rel="noopener">最长公共前缀</a></h2><p>没啥好方案，直接暴力即可。暴力的方式有多种，一种像这里直接每次一个字符一个字符的得出 <code>ans</code> ，也可以挨个字符串直接与 <code>ans（初值为字符串strs[0]）</code> 比较，逐渐缩小 <code>ans</code> 的长度，直到最后得出结果。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">longestCommonPrefix</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; strs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( strs.size()==<span class="number">0</span> )</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">int</span> lens = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">string</span> ans = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">char</span> ch;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>( strs[<span class="number">0</span>].length() &gt; lens )</span><br><span class="line">                ch = strs[<span class="number">0</span>][lens];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> ans;</span><br><span class="line">            <span class="keyword">for</span>( i=<span class="number">1</span>; i&lt;strs.size(); i++ )&#123;</span><br><span class="line">                <span class="keyword">if</span>( strs[i][lens]!=ch )</span><br><span class="line">                    <span class="keyword">return</span> ans;</span><br><span class="line">            &#125;</span><br><span class="line">            ans += ch;</span><br><span class="line">            lens++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="15、三数之和"><a href="#15、三数之和" class="headerlink" title="15、三数之和"></a>15、<a href="https://leetcode-cn.com/problems/3sum" target="_blank" rel="noopener">三数之和</a></h2><p>三数之和其实和前面的两数之和原理一样，都是使用的双指针。这里的三数，其实可以直接固定一数，然后调用前面写的两数之和的代码。唯一的一点 <code>trick</code> 可能就是在去重上。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; threeSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt; <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; ans;</span><br><span class="line">        <span class="keyword">if</span>( nums.size()&lt;<span class="number">3</span> )</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        <span class="comment">//对 nums 进行排序并去重(此处去重不合适)</span></span><br><span class="line">        sort( nums.begin(), nums.end() );</span><br><span class="line">        <span class="comment">//vector&lt;int&gt;:: iterator it = unique( nums.begin(), nums.end() );</span></span><br><span class="line">        <span class="comment">//nums.erase( it, nums.end() );</span></span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.size()<span class="number">-2</span>; i++ )&#123;</span><br><span class="line">            <span class="keyword">if</span>( i&gt;<span class="number">0</span> &amp;&amp; nums[i<span class="number">-1</span>]==nums[i] )</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            findTwoSum( nums, i+<span class="number">1</span>, nums.size()<span class="number">-1</span>, i, ans );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">findTwoSum</span><span class="params">( <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> s, <span class="keyword">int</span> e, <span class="keyword">int</span> target, <span class="built_in">vector</span>&lt; <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;&amp; ans )</span></span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; step_ans;</span><br><span class="line">        <span class="keyword">while</span>( s&lt;e )&#123;</span><br><span class="line">            <span class="keyword">if</span>( nums[s]+nums[e] == -nums[target] )&#123;</span><br><span class="line">                step_ans.clear();</span><br><span class="line">                step_ans.push_back(nums[target]);</span><br><span class="line">                step_ans.push_back(nums[s]);</span><br><span class="line">                step_ans.push_back(nums[e]);</span><br><span class="line">                ans.push_back(step_ans);</span><br><span class="line">                s++;</span><br><span class="line">                e--;</span><br><span class="line">                <span class="keyword">while</span>( s &lt; e &amp;&amp; nums[s]==nums[s<span class="number">-1</span>] )</span><br><span class="line">                    s++;</span><br><span class="line">                <span class="keyword">while</span>( e &gt; s &amp;&amp; nums[e]==nums[e+<span class="number">1</span>] )</span><br><span class="line">                    e--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>( nums[s]+nums[e] &gt; -nums[target] )</span><br><span class="line">                e--;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                s++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="16、最接近的三数之和"><a href="#16、最接近的三数之和" class="headerlink" title="16、最接近的三数之和"></a>16、<a href="https://leetcode-cn.com/problems/3sum-closest" target="_blank" rel="noopener">最接近的三数之和</a></h2><p>和三数之和的原理一样，排序后使用双指针遍历找最优解。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">threeSumClosest</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        sort( nums.begin(), nums.end() );</span><br><span class="line">        <span class="keyword">int</span> nearest = nums[<span class="number">0</span>]+nums[<span class="number">1</span>]+nums[<span class="number">2</span>], tmpSum;</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.size()<span class="number">-2</span>; i++ )&#123;</span><br><span class="line">            <span class="keyword">int</span> f = i+<span class="number">1</span>, e = nums.size()<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">while</span>( f&lt;e )&#123;</span><br><span class="line">                tmpSum = nums[f] + nums[e] + nums[i];</span><br><span class="line">                nearest = <span class="built_in">abs</span>(target-nearest)&gt;<span class="built_in">abs</span>(target-tmpSum)? tmpSum:nearest;</span><br><span class="line">                <span class="keyword">if</span>( tmpSum==target )</span><br><span class="line">                    <span class="keyword">return</span> target;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>( tmpSum &gt; target )</span><br><span class="line">                    e--;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    f++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nearest;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="17、电话号码的字母组合"><a href="#17、电话号码的字母组合" class="headerlink" title="17、电话号码的字母组合"></a>17、<a href="https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number" target="_blank" rel="noopener">电话号码的字母组合</a></h2><p>一行深搜代码解决，2年没写搜索了，敲的时候好生疏。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; letterCombinations(<span class="built_in">string</span> digits) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; mp,ans;</span><br><span class="line">        <span class="built_in">string</span> cur_ans;</span><br><span class="line">        mp.push_back(<span class="string">""</span>);</span><br><span class="line">        mp.push_back(<span class="string">""</span>);</span><br><span class="line">        mp.push_back(<span class="string">"abc"</span>);</span><br><span class="line">        mp.push_back(<span class="string">"def"</span>);</span><br><span class="line">        mp.push_back(<span class="string">"ghi"</span>);</span><br><span class="line">        mp.push_back(<span class="string">"jkl"</span>);</span><br><span class="line">        mp.push_back(<span class="string">"mno"</span>);</span><br><span class="line">        mp.push_back(<span class="string">"pqrs"</span>);</span><br><span class="line">        mp.push_back(<span class="string">"tuv"</span>);</span><br><span class="line">        mp.push_back(<span class="string">"wxyz"</span>);</span><br><span class="line">        <span class="keyword">if</span>( digits.length() )</span><br><span class="line">            digitsToString( mp, digits, ans, cur_ans );</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">digitsToString</span><span class="params">( <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; mp, <span class="built_in">string</span> digits, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; ans, <span class="built_in">string</span> cur_ans )</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( digits.length()==<span class="number">0</span> )&#123;</span><br><span class="line">            ans.push_back( cur_ans );</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> i=<span class="number">0</span>; i&lt;mp[digits[<span class="number">0</span>]-<span class="string">'0'</span>].length(); i++ )&#123;</span><br><span class="line">            digitsToString( mp, digits.substr(<span class="number">1</span>), ans, cur_ans+mp[digits[<span class="number">0</span>]-<span class="string">'0'</span>][i] );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="18、四数之和"><a href="#18、四数之和" class="headerlink" title="18、四数之和"></a>18、<a href="https://leetcode-cn.com/problems/4sum" target="_blank" rel="noopener">四数之和</a></h2><p>还是双指针操作（发现一个规律就是，前面这些和双指针操作相关的题目，一个典型的特点就是数组要先排个序），算法复杂度 $  O(n^3) $ ，其实有很多种解题方式。</p><p>第一种：双指针操作，先固定两个位置，然后 $ O(n) $ 的时间复杂度遍历剩下的元素，找解的过程中就去除可能存在的重复解，体现在代码中就是一片形式相同的<code>while</code>循环。</p><p>第二种：还是双指针操作，在求解的过程中，我不管解是否存在重复，一一加到<code>ans</code>里面，最后再进行一个去重处理。优点是编码简单，缺点是空间复杂度高，最坏情况下为$n^4$的空间复杂度（nums全为0，target也为0）。</p><p>第三种：以空间换时间，利用$ O(n^2) $的空间先求出两个数字的和，然后变成 <code>两数之和</code>  问题。</p><p>第四种：使用深搜操作，理论上来讲，此种方法可以求 <code>m</code> 数之和，时间复杂度为 $ O(n^{m-1}) $。</p><p>方案一代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; fourSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt; <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; ans;</span><br><span class="line">        <span class="keyword">if</span>( nums.size()&lt;<span class="number">4</span> )</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        sort( nums.begin(), nums.end() );</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.size()<span class="number">-3</span>; i++ )&#123;</span><br><span class="line">            <span class="keyword">for</span>( <span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;nums.size()<span class="number">-2</span>; j++ )&#123;</span><br><span class="line">                <span class="keyword">int</span> f = j+<span class="number">1</span>, e = nums.size()<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">while</span>( f&lt;e )&#123;</span><br><span class="line">                    <span class="keyword">int</span> sum = nums[i]+nums[j]+nums[f]+nums[e];</span><br><span class="line">                    <span class="keyword">if</span>( sum==target )&#123;</span><br><span class="line">                        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmp_ans;</span><br><span class="line">                        tmp_ans.push_back(nums[i]);</span><br><span class="line">                        tmp_ans.push_back(nums[j]);</span><br><span class="line">                        tmp_ans.push_back(nums[f]);</span><br><span class="line">                        tmp_ans.push_back(nums[e]);</span><br><span class="line">                        ans.push_back( tmp_ans );</span><br><span class="line">                        f++;</span><br><span class="line">                        <span class="keyword">while</span>( f&lt;e &amp;&amp; nums[f<span class="number">-1</span>]==nums[f] )&#123;</span><br><span class="line">                            f++;</span><br><span class="line">                        &#125;</span><br><span class="line">                        e--;</span><br><span class="line">                        <span class="keyword">while</span>( e&gt;f &amp;&amp; nums[e+<span class="number">1</span>]==nums[e] )&#123;</span><br><span class="line">                            e--;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>( sum&gt;target )&#123;</span><br><span class="line">                        e--;</span><br><span class="line">                        <span class="keyword">while</span>( e&gt;f &amp;&amp; nums[e+<span class="number">1</span>]==nums[e] )&#123;</span><br><span class="line">                            e--;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        f++;</span><br><span class="line">                        <span class="keyword">while</span>( f&lt;e &amp;&amp; nums[f<span class="number">-1</span>]==nums[f] )&#123;</span><br><span class="line">                            f++;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span>( j+<span class="number">1</span>&lt;nums.size()<span class="number">-2</span> &amp;&amp; nums[j+<span class="number">1</span>]==nums[j] )&#123;</span><br><span class="line">                    j++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>( i+<span class="number">1</span>&lt;nums.size()<span class="number">-3</span> &amp;&amp; nums[i+<span class="number">1</span>]==nums[i] )&#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="19、删除链表的倒数第N个节点"><a href="#19、删除链表的倒数第N个节点" class="headerlink" title="19、删除链表的倒数第N个节点"></a>19、<a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list" target="_blank" rel="noopener">删除链表的倒数第N个节点</a></h2><p>一遍遍历即可，其实也是双指针的思想.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        ListNode *dummy = (ListNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ListNode));</span><br><span class="line">        dummy-&gt;next = head;</span><br><span class="line">        ListNode *f = dummy, *e = dummy;</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++ )</span><br><span class="line">            e = e-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>( e-&gt;next )&#123;</span><br><span class="line">            f = f-&gt;next;</span><br><span class="line">            e = e-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        f-&gt;next = f-&gt;next-&gt;next;</span><br><span class="line">        <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="20、有效的括号"><a href="#20、有效的括号" class="headerlink" title="20、有效的括号"></a>20、<a href="https://leetcode-cn.com/problems/valid-parentheses" target="_blank" rel="noopener">有效的括号</a></h2><p>水题，使用栈匹配一下即可，遇到左括号进栈，遇见右括号出栈，最后判断栈是否为空。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isValid</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; ans;</span><br><span class="line">        ans.push(<span class="string">'#'</span>); <span class="comment">//加栈底后期就不用判断空不空了</span></span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> i=<span class="number">0</span>; i&lt;s.length(); i++ )&#123;</span><br><span class="line">            <span class="keyword">if</span>( s[i]==<span class="string">'('</span> || s[i]==<span class="string">'['</span> || s[i]==<span class="string">'&#123;'</span> )</span><br><span class="line">                ans.push(s[i]);</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>( (s[i]==<span class="string">')'</span>&amp;&amp;ans.top()!=<span class="string">'('</span>) || (s[i]==<span class="string">']'</span>&amp;&amp;ans.top()!=<span class="string">'['</span>) || (s[i]==<span class="string">'&#125;'</span>&amp;&amp;ans.top()!=<span class="string">'&#123;'</span>) )</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    ans.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans.top()==<span class="string">'#'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;11、盛最多水的容器&quot;&gt;&lt;a href=&quot;#11、盛最多水的容器&quot; class=&quot;headerlink&quot; title=&quot;11、盛最多水的容器&quot;&gt;&lt;/a&gt;11、&lt;a href=&quot;https://leetcode-cn.com/problems/container-with-most-water&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;盛最多水的容器&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;双指针，算法中一个很重要的技巧，之前的三数求和就用到了双指针的技巧。&lt;/p&gt;
&lt;p&gt;我们在由线段长度构成的数组中使用两个指针，一个放在开始，一个置于末尾。 此外，我们会使用变量 &lt;code&gt;maxArea&lt;/code&gt; 来持续存储到目前为止所获得的最大面积。 在每一步中，我们会找出指针所指向的两条线段形成的区域，更新 &lt;code&gt;maxArea&lt;/code&gt;，并将指向较短线段的指针向较长线段那端移动一步。&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;maxArea&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; height)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; maxArea = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; frontPoint = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, endPoint = height.size()&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;( frontPoint&amp;lt;endPoint )&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            maxArea = max( maxArea, (endPoint-frontPoint)*min(height[frontPoint], height[endPoint]) );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( height[frontPoint]&amp;lt;height[endPoint] )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                frontPoint++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                endPoint--;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; maxArea;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="https://wangjibao.com.cn/categories/LeetCode/"/>
    
      <category term="LeetCode11-20" scheme="https://wangjibao.com.cn/categories/LeetCode/LeetCode11-20/"/>
    
    
      <category term="LeetCode" scheme="https://wangjibao.com.cn/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>colab免费云GPU使用教程</title>
    <link href="https://wangjibao.com.cn/2018/10/04/colab%E5%85%8D%E8%B4%B9%E4%BA%91GPU%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <id>https://wangjibao.com.cn/2018/10/04/colab免费云GPU使用教程/</id>
    <published>2018-10-04T15:58:42.000Z</published>
    <updated>2018-10-05T14:17:38.415Z</updated>
    
    <content type="html"><![CDATA[<h1 id="谷歌coLab免费云GPU搭建教程"><a href="#谷歌coLab免费云GPU搭建教程" class="headerlink" title="谷歌coLab免费云GPU搭建教程"></a>谷歌coLab免费云GPU搭建教程</h1><h3 id="网上教程的链接"><a href="#网上教程的链接" class="headerlink" title="网上教程的链接"></a>网上教程的链接</h3><p>知乎  <a href="https://zhuanlan.zhihu.com/p/34436045" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/34436045</a></p><p>cnblogs   <a href="http://www.cnblogs.com/kid551/p/8544908.html" target="_blank" rel="noopener">http://www.cnblogs.com/kid551/p/8544908.html</a></p><p><strong>注意第11步的代码替换成下列的代码：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">!apt-get install -y -qq software-properties-common python-software-properties module-init-tools</span><br><span class="line"><span class="meta">#</span>!add-apt-repository -y ppa:alessandro-strada/ppa 2&gt;&amp;1 &gt; /dev/null</span><br><span class="line"><span class="meta">#</span>!apt-get update -qq 2&gt;&amp;1 &gt; /dev/null</span><br><span class="line"><span class="meta">#</span>!apt-get -y install -qq google-drive-ocamlfuse fuse</span><br><span class="line">!wget https://launchpad.net/~alessandro-strada/+archive/ubuntu/google-drive-ocamlfuse-beta/+build/15331130/+files/google-drive-ocamlfuse_0.7.0-0ubuntu1_amd64.deb</span><br><span class="line">!dpkg -i google-drive-ocamlfuse_0.7.0-0ubuntu1_amd64.deb</span><br><span class="line">!apt-get install -f</span><br><span class="line">!apt-get -y install -qq fuse</span><br><span class="line">from google.colab import auth</span><br><span class="line">auth.authenticate_user()</span><br><span class="line">from oauth2client.client import GoogleCredentials</span><br><span class="line">creds = GoogleCredentials.get_application_default()</span><br><span class="line">import getpass</span><br><span class="line">!google-drive-ocamlfuse -headless -id=&#123;creds.client_id&#125; -secret=&#123;creds.client_secret&#125; &lt; /dev/null 2&gt;&amp;1 | grep URL</span><br><span class="line">vcode = getpass.getpass()</span><br><span class="line">!echo &#123;vcode&#125; | google-drive-ocamlfuse -headless -id=&#123;creds.client_id&#125; -secret=&#123;creds.client_secret&#125;</span><br></pre></td></tr></table></figure><p>会报错，由于 <code>dpkg -i</code> 安装时依赖的原因，但是由于使用了 <code>install -f</code>，安装会成功的。</p><p>接着使用 <code>google-drive-ocamlfuse</code>  将云盘文件夹和远程的VM链接起来，方便文件共享操作。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">!mkdir -p drive</span><br><span class="line">!google-drive-ocamlfuse drive</span><br></pre></td></tr></table></figure><p>路径：</p><p>\content\drive...</p><p><strong>取消挂载</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fusermount -u ***</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;谷歌coLab免费云GPU搭建教程&quot;&gt;&lt;a href=&quot;#谷歌coLab免费云GPU搭建教程&quot; class=&quot;headerlink&quot; title=&quot;谷歌coLab免费云GPU搭建教程&quot;&gt;&lt;/a&gt;谷歌coLab免费云GPU搭建教程&lt;/h1&gt;&lt;h3 id=&quot;网上教程的
      
    
    </summary>
    
      <category term="笔记" scheme="https://wangjibao.com.cn/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="https://wangjibao.com.cn/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu16.04安装Tensorflow-GPU</title>
    <link href="https://wangjibao.com.cn/2018/10/04/Ubuntu16-04%E5%AE%89%E8%A3%85Tensorflow-GPU/"/>
    <id>https://wangjibao.com.cn/2018/10/04/Ubuntu16-04安装Tensorflow-GPU/</id>
    <published>2018-10-04T15:57:47.000Z</published>
    <updated>2018-10-05T14:19:22.531Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Ubuntu安装及TensorFlow-Gpu安装"><a href="#一、Ubuntu安装及TensorFlow-Gpu安装" class="headerlink" title="一、Ubuntu安装及TensorFlow-Gpu安装"></a>一、Ubuntu安装及TensorFlow-Gpu安装</h2><p>1、UEFI启动的ubuntu要将 <code>\boot</code>分区设置成 <code>EFI</code>分区，这样会在<code>bios</code>中出现启动项。注意EFI模式只识别FAT32的U盘启动盘。</p><p>2、安装 搜狗输入法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">下载 sogou.deb</span><br><span class="line">sudo dpkg -i sogou.deb       #出现安装不成功，需要依赖</span><br><span class="line">sudo apt-get install -f      #安装依赖</span><br><span class="line">sudo dpkg -i sogou.deb</span><br><span class="line">然后在设置里按照自己的需求设置</span><br></pre></td></tr></table></figure><p>3、设置息屏时间</p><p>4、注意一定要安装好对应的显卡版本，在 <code>设置 &gt;&gt; 软件和更新 &gt;&gt; 附加驱动</code>里进行选择对应的显卡驱动<code>nvidia</code>；命令 <code>nvidia-smi</code>查看GPU驱动信息。   </p><p>5、安装更新   <code>sudo apt-get update</code>      <code>sudo apt-get install vim</code></p><p>6、安装 及卸载Anaconda</p><p>官网下载对应的安装包，执行命令 <code>bash Anaconda2-4.4.0-Linux-x86_64.sh</code> 即可进行安装，期间会选择安装路径啥的，默认即可。 安装完成后，重启 <code>命令窗口</code>，执行 python  命令即可看到已经安装成功。如果不成功，执行 <code>source ~/.bashrc</code>命令，使 <code>bashrc</code>生效。</p><p>卸载的话：</p><ul><li>删除整个anaconda的目录     <code>rm -rf anaconda*</code></li><li>将 <code>~/.bashrc</code>文件中的关于 anaconda的行注释掉</li><li>生效      <code>source ~/.bashrc</code></li></ul><p>7、命令  <code>anaconda-navigator</code>进入图形界面的操作。其实主要还是命令行操作，下面是 <code>conda</code>的常用命令。注意 <code>conda</code>是python的环境管理工具，兼具包管理；<code>pip</code>只是python的包管理工具而已。</p><a id="more"></a><p>8、<code>conda</code>常用命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">conda --help                             #查看帮助</span><br><span class="line">conda update conda                       #升级conda</span><br><span class="line">conda update anaconda                    #升级anaconda</span><br><span class="line">conda --version     或者    conda -V      #查看conda的版本</span><br><span class="line">conda info --envs                        #查看本地已创建的python运行环境，带*号的代表当前环境</span><br><span class="line">#创建python运行环境</span><br><span class="line">conda create --name &lt;env_name&gt; python=2.7/3.5/3.6</span><br><span class="line">#列出当前环境下所有活跃的包</span><br><span class="line">conda list</span><br><span class="line"></span><br><span class="line">#安装Python包</span><br><span class="line">conda install --name &lt;env_name&gt; &lt;package_name&gt;=version</span><br><span class="line">或者直接 activate 进入对应的环境中执行</span><br><span class="line">conda install &lt;package_name&gt;</span><br><span class="line"></span><br><span class="line">#更新python包</span><br><span class="line">conda update --name &lt;env_name&gt; &lt;package_name&gt;</span><br><span class="line">或者进入对应的环境执行</span><br><span class="line">conda update &lt;package_name&gt;</span><br><span class="line">#更新所有的包</span><br><span class="line">conda update --all</span><br><span class="line"></span><br><span class="line">#移除整个环境或者环境中的包</span><br><span class="line">conda remove --name &lt;env_name&gt; &lt;package_name&gt;     #进去到对应的环境就可以不指定&lt;env_name&gt;</span><br><span class="line">conda remove --name &lt;env_name&gt; --all              #将环境的包全部移除，相当于移除环境</span><br><span class="line"></span><br><span class="line">#查找包</span><br><span class="line">conda search --full-name &lt;package_name&gt;     #精确查找</span><br><span class="line">conda search *&lt;package_name&gt;*               #模糊查找</span><br><span class="line"></span><br><span class="line">#退出当前环境</span><br><span class="line">source deactivate &lt;env_name&gt;</span><br><span class="line">#激活当前环境</span><br><span class="line">source activate &lt;env_name&gt;</span><br><span class="line"></span><br><span class="line">#删除conda</span><br><span class="line">rm -rf ~/anaconda</span><br></pre></td></tr></table></figure><p>9、安装 <code>tensorflow-gpu</code></p><p>使用<code>conda</code>创建一个python环境，并激活进入，在保证<code>nvidia</code>显卡驱动正常的情况下，在该环境只执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install tensorflow-gpu=1.8/1.0/1.10/1.11    #我用的是1.9</span><br></pre></td></tr></table></figure><p>此命令会自动帮你安装对应版本的 <code>cudaToolKit</code>， <code>cupTi</code> ， <code>cuDNN SDK</code>等等，十分强大，再也不用自己照着傻逼<code>CSDN</code>配置各种东西了。</p><p>10、查看 <code>cuda</code> 和 <code>cuDNN</code>版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#cuda 版本 （9.0）</span><br><span class="line">cat /usr/local/cuda/version.txt</span><br><span class="line">#cudnn 版本 （7.3）</span><br><span class="line">cat /usr/local/cuda/include/cudnn.h | grep CUDNN_MAJOR -A 2</span><br></pre></td></tr></table></figure><h2 id="二、ubuntu安装pycharm"><a href="#二、ubuntu安装pycharm" class="headerlink" title="二、ubuntu安装pycharm"></a>二、ubuntu安装pycharm</h2><p>1、去官网下载对应的 <code>community</code>版本，免费。</p><p>2、<code>tar -xvzf **</code>进行解压到当前文件夹中；  或者直接 <code>extract</code>提取</p><p>3、进入到对应的 <code>bin</code> 文件夹，执行命令 <code>sh ./pycharm.sh</code>进行安装</p><p>4、 设置桌面图标</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit  /usr/share/applications/pycharm.desktop</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Type=Application</span><br><span class="line">Name=Pycharm</span><br><span class="line">GenericName=Pycharm3</span><br><span class="line">Comment=Pycharm3:The Python IDE</span><br><span class="line">Exec=&quot;/home/snakeson/developer/pycharm-community-2017.2.3/bin/pycharm.sh&quot; %f  #注意替换</span><br><span class="line">Icon=/home/snakeson/developer/pycharm-community-2017.2.3/bin/pycharm.png      #注意替换 </span><br><span class="line">Terminal=pycharm</span><br><span class="line">Categories=Pycharm;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x /usr/share/applications/pycharm.desktop      #添加执行权限</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">将/usr/share/applications/pycharm.desktop文件拷贝到桌面，双击即可运行。</span><br></pre></td></tr></table></figure><p>5、卸载pycharm</p><ul><li>所有的配置都保存在解压的目录中，所以卸载只要<code>sudo rm -r **文件夹</code>  </li><li>默认会在 <code>home</code>目录创建一个 隐藏目录    <code>sudo rm -r ~/.pycharm*</code></li><li>删除之前创建的 <code>pycharm.desktop</code>文件，这样，所有的东西就全卸载干净了。</li></ul><p>6、之前使用 <code>conda 创建的所有的python环境，在pycharm中都可以使用。既可以在创建项目的时候指定已存在的解释环境，也可以后期在设置中更改</code>interpreter`选项。</p><p>7、pycharm中设置鼠标滚轮调节字体大小</p><p>在设置中 <code>keymap</code>  ，搜索<code>increase</code>  <code>decrease</code> 字段即可设置 鼠标快捷键</p><p>8、pycharm设置     <code>菜单栏</code> 字体及大小</p><p>在设置里 <code>override default fonts by（not recommended)</code>中修改。</p><p>9、自动生成新建Py文件的模板 </p><p><code>file &gt;&gt; setting &gt;&gt; editor &gt;&gt; file and code templates</code>中，选择<code>python script</code>文件，添加如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _*_ coding: utf-8 _*_</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@author: spring371327</span></span><br><span class="line"><span class="string">@time: $&#123;DATE&#125; $&#123;TIME&#125;</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h2 id="三、ubuntu优化及必备软件安装"><a href="#三、ubuntu优化及必备软件安装" class="headerlink" title="三、ubuntu优化及必备软件安装"></a>三、ubuntu优化及必备软件安装</h2><p>1、卸载自带的 amazon</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove unity-webapps-common</span><br></pre></td></tr></table></figure><p>2、</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、Ubuntu安装及TensorFlow-Gpu安装&quot;&gt;&lt;a href=&quot;#一、Ubuntu安装及TensorFlow-Gpu安装&quot; class=&quot;headerlink&quot; title=&quot;一、Ubuntu安装及TensorFlow-Gpu安装&quot;&gt;&lt;/a&gt;一、Ubuntu安装及TensorFlow-Gpu安装&lt;/h2&gt;&lt;p&gt;1、UEFI启动的ubuntu要将 &lt;code&gt;\boot&lt;/code&gt;分区设置成 &lt;code&gt;EFI&lt;/code&gt;分区，这样会在&lt;code&gt;bios&lt;/code&gt;中出现启动项。注意EFI模式只识别FAT32的U盘启动盘。&lt;/p&gt;
&lt;p&gt;2、安装 搜狗输入法&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;下载 sogou.deb&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo dpkg -i sogou.deb       #出现安装不成功，需要依赖&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install -f      #安装依赖&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo dpkg -i sogou.deb&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;然后在设置里按照自己的需求设置&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;3、设置息屏时间&lt;/p&gt;
&lt;p&gt;4、注意一定要安装好对应的显卡版本，在 &lt;code&gt;设置 &amp;gt;&amp;gt; 软件和更新 &amp;gt;&amp;gt; 附加驱动&lt;/code&gt;里进行选择对应的显卡驱动&lt;code&gt;nvidia&lt;/code&gt;；命令 &lt;code&gt;nvidia-smi&lt;/code&gt;查看GPU驱动信息。   &lt;/p&gt;
&lt;p&gt;5、安装更新   &lt;code&gt;sudo apt-get update&lt;/code&gt;      &lt;code&gt;sudo apt-get install vim&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;6、安装 及卸载Anaconda&lt;/p&gt;
&lt;p&gt;官网下载对应的安装包，执行命令 &lt;code&gt;bash Anaconda2-4.4.0-Linux-x86_64.sh&lt;/code&gt; 即可进行安装，期间会选择安装路径啥的，默认即可。 安装完成后，重启 &lt;code&gt;命令窗口&lt;/code&gt;，执行 python  命令即可看到已经安装成功。如果不成功，执行 &lt;code&gt;source ~/.bashrc&lt;/code&gt;命令，使 &lt;code&gt;bashrc&lt;/code&gt;生效。&lt;/p&gt;
&lt;p&gt;卸载的话：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;删除整个anaconda的目录     &lt;code&gt;rm -rf anaconda*&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;将 &lt;code&gt;~/.bashrc&lt;/code&gt;文件中的关于 anaconda的行注释掉&lt;/li&gt;
&lt;li&gt;生效      &lt;code&gt;source ~/.bashrc&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;7、命令  &lt;code&gt;anaconda-navigator&lt;/code&gt;进入图形界面的操作。其实主要还是命令行操作，下面是 &lt;code&gt;conda&lt;/code&gt;的常用命令。注意 &lt;code&gt;conda&lt;/code&gt;是python的环境管理工具，兼具包管理；&lt;code&gt;pip&lt;/code&gt;只是python的包管理工具而已。&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://wangjibao.com.cn/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="https://wangjibao.com.cn/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>算法课第一次作业-选做1-5-6</title>
    <link href="https://wangjibao.com.cn/2018/10/04/%E7%AE%97%E6%B3%95%E8%AF%BE%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BD%9C%E4%B8%9A-%E9%80%89%E5%81%9A1-5-6/"/>
    <id>https://wangjibao.com.cn/2018/10/04/算法课第一次作业-选做1-5-6/</id>
    <published>2018-10-04T15:56:17.000Z</published>
    <updated>2018-10-20T03:06:49.294Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、Divide-and-Conquer"><a href="#一、Divide-and-Conquer" class="headerlink" title="一、Divide and Conquer"></a>一、Divide and Conquer</h3><p>　　You are interested in analyzing some hard-to-obtain data from two separate databases. Each database contains n numerical values, so there are 2n values total and you may assume that no two values are the same. You’d like to determine the median of this set of 2n values, which we will define here to be the n-th　smallest value.</p><p>　　However, the only way you can access these values is through queries to the databases. In a single query, you can specify a value k to one of the two databases, and the chosen database will return the kth smallest value that it contains. Since queries are expensive, you would like to compute the median using as few queries as possible.</p><p>Give an algorithm that finds the median value using at most O(logn) queries.　　</p><h4 id="1、problem-solving-ideas-and-pseudo-code"><a href="#1、problem-solving-ideas-and-pseudo-code" class="headerlink" title="1、problem-solving ideas and pseudo-code"></a>1、problem-solving ideas and pseudo-code</h4><p>首先将现实问题转化一下，变成计算机算法问题，即 <strong>找2个有序数组的并集的中位数</strong> ，<a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays/description/" target="_blank" rel="noopener">LeetCode 第四题</a>。</p><p><strong>(1）problem-solving ideas</strong></p><p>求中位数需要根据数组长度是奇数还是偶数分别讨论，奇数长度时中位数为最中间的一个数，偶数长度时中位数为最中间的两个数的平均值，为了方便，可以实现一个比题目更一般化的函数，求A和B的第k小数的函数，那么中位数的问题很容易解决。</p><p>求一个有序数组的第k个数只需要O(1)的复杂度，现在有两个数组，显然花费额外空间以O(n)时间归并然后O(1)寻找不满足题目要求。既然要求log时间复杂度，一般需要使用到二分思想。</p><p>分别考虑A和B的第k/2个元素：</p><ul><li>如果它们相等，则第k个数为其中的任意一个</li><li>如果A中的比较大，则B中前k/2个元素都不可能是第k个数了，因为这个数至少应该为A的第k/2个数，把B的前k/2去掉，然后重新寻找。</li><li>如果B中的比较大，则把A的前k/2个数去掉，重新寻找。</li></ul><p>直到A和B中某个变为空时或者寻找第1个数时可以停止递归，直接找到结果。</p><p>注意，上面的k/2只是理想的简单情况，实际上A和B的长度可能不够k/2，或者k为奇数等，但这些不是主要问题，可以让A取第k/2个数字，然后A不够长，则取A的最后一个数字，然后B取剩下长度对应的那个数字，具体参考代码。</p><a id="more"></a><p><strong>(2）pseudo code</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> totalLength = nums1.size() + nums2.size();</span><br><span class="line">    <span class="keyword">if</span>( totalLength&amp;<span class="number">1</span> )</span><br><span class="line">        <span class="keyword">return</span> findKth( nums1.begin(), nums1.size(), nums2.begin(), nums2.size(), (totalLength&gt;&gt;<span class="number">1</span>)+<span class="number">1</span> );</span><br><span class="line">    <span class="keyword">else</span> <span class="comment">//除以 2.0 是为了保留小数点</span></span><br><span class="line">        <span class="keyword">return</span> (findKth( nums1.begin(), nums1.size(), nums2.begin(), nums2.size(), (totalLength&gt;&gt;<span class="number">1</span>) ) + findKth( nums1.begin(), nums1.size(), nums2.begin(), nums2.size(), (totalLength&gt;&gt;<span class="number">1</span>)+<span class="number">1</span> ))/<span class="number">2.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findKth</span><span class="params">( <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;:: iterator nums1, <span class="keyword">int</span> len1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;:: iterator nums2, <span class="keyword">int</span> len2, <span class="keyword">int</span> k )</span></span>&#123;</span><br><span class="line"><span class="comment">// 默认 len1 要大于 len2</span></span><br><span class="line">    <span class="keyword">if</span>( len1&lt;len2 )</span><br><span class="line">        <span class="keyword">return</span> findKth( nums2, len2, nums1, len1, k );</span><br><span class="line">    <span class="keyword">if</span>( len2==<span class="number">0</span> )</span><br><span class="line">        <span class="keyword">return</span> nums1[k<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">if</span>( k==<span class="number">1</span> )  <span class="comment">//k==1做特判，因为后期要移位, 不做特判point-1会出现负值</span></span><br><span class="line">        <span class="keyword">return</span> min( nums1[<span class="number">0</span>], nums2[<span class="number">0</span>] );</span><br><span class="line">    <span class="keyword">int</span> point2 = min( k&gt;&gt;<span class="number">1</span>, len2 );</span><br><span class="line">    <span class="keyword">int</span> point1 = k - point2;</span><br><span class="line">    <span class="comment">//下面对 nums1[point1-1] 和 nums2[point2-1]的大小关系进行讨论</span></span><br><span class="line">    <span class="keyword">if</span>( nums1[point1<span class="number">-1</span>] &gt; nums2[point2<span class="number">-1</span>] )</span><br><span class="line">        <span class="keyword">return</span> findKth( nums1, point1, nums2+point2, len2-point2, k-point2 );</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>( nums1[point1<span class="number">-1</span>] &lt; nums2[point2<span class="number">-1</span>] )</span><br><span class="line">        <span class="keyword">return</span> findKth( nums1+point1, len1-point1, nums2, point2, k-point1 );</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> nums1[point1<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="2、subproblem-reduction-graph"><a href="#2、subproblem-reduction-graph" class="headerlink" title="2、subproblem reduction graph"></a>2、subproblem reduction graph</h4><p><img src="/2018/10/04/算法课第一次作业-选做1-5-6/1.png" alt="问题缩减图"></p><h4 id="3、prove-the-correctness"><a href="#3、prove-the-correctness" class="headerlink" title="3、prove the correctness"></a>3、prove the correctness</h4><p>寻找两个有序数组的第K大数，那么肯定是第1个数组贡献 <strong>a</strong> 个数，第二个数组贡献 <strong>K - a</strong> 个数。首先我们假设每个数组分别贡献 <strong>K/2</strong>个数，讨论 A[k/2] 和 B[k/2] 的大小情况。</p><p>当 <strong>A[k/2] &gt; B[K/2]</strong> 时，很显然需要减少数组A贡献的数字的个数，增加数组B贡献的数组的个数，如下图：</p><p><img src="/2018/10/04/算法课第一次作业-选做1-5-6/11.png" alt=""></p><p>当 <strong>A[k/2] &lt; B[K/2]</strong> 时，很显然需要增加数组A贡献的数字的个数，减少数组B贡献的数组的个数，如下图：</p><p><img src="/2018/10/04/算法课第一次作业-选做1-5-6/13.png" alt=""></p><p>随着算法的执行，搜索的数组长度不断缩小，最后一定会返回对应的中位数值。</p><h4 id="4、the-complexity-of-this-algorithm"><a href="#4、the-complexity-of-this-algorithm" class="headerlink" title="4、the complexity of this algorithm"></a>4、the complexity of this algorithm</h4><p>分析可得：</p><p><img src="/2018/10/04/算法课第一次作业-选做1-5-6/41.png" alt=""></p><h3 id="五、Divide-and-Conquer"><a href="#五、Divide-and-Conquer" class="headerlink" title="五、Divide and Conquer"></a>五、Divide and Conquer</h3><p>　　Recall the problem of ﬁnding the number of inversions. As in the course, we are given a sequence of n numbers a1,··· ,an, which we assume are all distinct, and we deﬁne an inversion to be a pair i &lt; j such that ai &gt; aj.</p><p>　　We motivated the problem of counting inversions as a good measure of how diﬀerent two orderings are. However, one might feel that this measure is too sensitive. Let’s call a pair a significant inversion if i &lt; j and ai &gt; 3aj. Given an O(nlogn) algorithm to count the number of signiﬁcant inversions between two orderings.</p><h4 id="1、problem-solving-ideas-and-pseudo-code-1"><a href="#1、problem-solving-ideas-and-pseudo-code-1" class="headerlink" title="1、problem-solving ideas and pseudo-code"></a>1、problem-solving ideas and pseudo-code</h4><p><strong>(1）problem-solving ideas</strong></p><p>求数列的逆序数，除了暴力求解方式外，也可以使用归并排序、树状数组、线段树等结构进行计算。此处选择使用归并排序。</p><p>首先，将数组从中间切开，分为左右两半，<strong>A[0…n/2]</strong> 和 <strong>A [n/2+1…n]</strong>，分别计算这两个子问题的显著逆序数；</p><p>然后，计算跨左右两边的数对所形成的显著逆序的个数。</p><p>最后，将这三者的显著逆序数求和，即为整个数组的显著逆序数。</p><p><strong>(2）pseudo code</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">//统计变量num为全局变量</span><br><span class="line">void mergesort(int begin, int end)&#123;</span><br><span class="line">if (begin &gt;= end)</span><br><span class="line">return;</span><br><span class="line">int mid = (begin + end) / 2;</span><br><span class="line">mergesort(begin, mid);</span><br><span class="line">mergesort(mid + 1, end);</span><br><span class="line">mcount(begin, mid, end);</span><br><span class="line">merge(begin, mid, end);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void mcount(int begin, int mid, int end)&#123;</span><br><span class="line">int i = begin;</span><br><span class="line">int j = mid + 1;</span><br><span class="line">int k = begin;</span><br><span class="line">while (i &lt;= mid &amp;&amp; j &lt;= end)&#123;</span><br><span class="line">if (a[i] &gt; 2 * a[j])&#123;</span><br><span class="line">num += mid - i + 1;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">void merge(int begin, int mid, int end)&#123;</span><br><span class="line">int i = begin;</span><br><span class="line">int j = mid + 1;</span><br><span class="line">int k = begin;</span><br><span class="line"> </span><br><span class="line">while (i &lt;= mid &amp;&amp; j &lt;= end)&#123;</span><br><span class="line">if (a[i] &gt; a[j])&#123;</span><br><span class="line">temp[k] = a[j];</span><br><span class="line">k++;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">temp[k] = a[i];</span><br><span class="line">k++;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">while (i &lt;= mid)&#123;</span><br><span class="line">temp[k] = a[i];</span><br><span class="line">k++;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">while (j &lt;= end)&#123;</span><br><span class="line">temp[k] = a[j];</span><br><span class="line">k++;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">for (int p = begin; p &lt;= end; p++)</span><br><span class="line">a[p] = temp[p];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、subproblem-reduction-graph-1"><a href="#2、subproblem-reduction-graph-1" class="headerlink" title="2、subproblem reduction graph"></a>2、subproblem reduction graph</h4><p>先分：</p><p><img src="/2018/10/04/算法课第一次作业-选做1-5-6/21.png" alt=""></p><p>后合：</p><p><img src="/2018/10/04/算法课第一次作业-选做1-5-6/22.png" alt=""></p><h4 id="3、prove-the-correctness-1"><a href="#3、prove-the-correctness-1" class="headerlink" title="3、prove the correctness"></a>3、prove the correctness</h4><p>其中，计算左右两边的显著逆序数的时候，会同时将左右两边的子数组变成有序。在计算跨两边的数对所形成的显著逆序的时候，就不用进行暴力遍历，只需O(n)的遍历即可。当 <strong>L[i] &gt; 3*R[j]</strong> 时，RC += |L|-i 即可，L中位于下标 i 之后的数字就不用遍历了，自然要比 3*R[j] 大。<br>同时，计算过程是基于归并排序的，整个算法即正确。</p><h4 id="4、the-complexity-of-this-algorithm-1"><a href="#4、the-complexity-of-this-algorithm-1" class="headerlink" title="4、the complexity of this algorithm"></a>4、the complexity of this algorithm</h4><p>计算左边的时间复杂度为 T(n/2)， 计算右边的时间复杂度为 T(n/2)， 合并的时间复杂度为 O(n)，所以总的时间复杂度为：</p><p><img src="/2018/10/04/算法课第一次作业-选做1-5-6/42.png" alt=""></p><h3 id="六、Divide-and-Conquer"><a href="#六、Divide-and-Conquer" class="headerlink" title="六、Divide and Conquer"></a>六、Divide and Conquer</h3><p>Given a table M consisting of 2n ∗ 2n blocks, we want to ﬁll it with a L-shaped module (consisting of three blocks). The L-shaped module is shown below.  </p><p><img src="/2018/10/04/算法课第一次作业-选做1-5-6/31.png" alt=""></p><p>Please give a ﬁll method, so that the last element of the table (M2n,2n) is empty.</p><p>For example: </p><p><img src="/2018/10/04/算法课第一次作业-选做1-5-6/32.png" alt=""></p><h4 id="1、problem-solving-ideas-and-pseudo-code-2"><a href="#1、problem-solving-ideas-and-pseudo-code-2" class="headerlink" title="1、problem-solving ideas and pseudo-code"></a>1、problem-solving ideas and pseudo-code</h4><p><strong>(1）problem-solving ideas</strong></p><p>　　有一个特殊方格的棋盘覆盖问题，只不过，此题目将特殊方格定死了，只能为最右下角那个，即 P(size-1,size-1)那个小方格。</p><p>　　该题关键在于如何划分各L型骨牌所在位置区域。我们发现，L型骨牌占三个方格，我们可以把棋盘从中央分为四块，那么这四块子棋盘中仅一块是有特殊方格的，可以用一块骨牌使得其他三块子棋盘均被覆盖。以此为原则，无论这种分法是否最终可解，我们首先保证了每个子棋盘都有一个特殊方格，所以，分治的模型就出来了。</p><p>　　我们可以用递归来完成分治的任务。每次递归，chess_board(int posx,int posy,int x,int y,int size)，(posx,posy)为子棋盘左上角坐标,size为子棋盘大小，因为棋盘总为正方形，所以size为边长，那么这3个参数就确定了子棋盘的位置和大小；(x,y)表示子棋盘中特殊方格的位置，这个位置是由上层递归分配骨牌后决定的。以此为标准，递归流程为：</p><p>①判断边界，若当前棋盘大小为1，则无法再分割，递归结束。</p><p>②定子棋盘中心位置。</p><p>③判断特殊方格所在位置（左上，右上，左下，或右下）。</p><p>④根据特殊方格位置确定所选L型骨牌，原特殊方格和三个L型骨牌的方格分别为四个子棋盘的特殊方格。</p><p>⑤依据④中判断，按编号填充棋盘。</p><p>⑥4次递归，分别对应四个子棋盘。</p><p><strong>(2）pseudo code</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">chess_board</span><span class="params">(<span class="keyword">int</span> posx,<span class="keyword">int</span> posy,<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>( size==<span class="number">1</span> )</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">size /= <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> num = Count++;</span><br><span class="line"><span class="comment">//左上角</span></span><br><span class="line"><span class="keyword">if</span>( posx+size&gt;x &amp;&amp; posy+size&gt;y )</span><br><span class="line">chess_board(posx,posy,x,y,size);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">board[posx+size<span class="number">-1</span>][posy+size<span class="number">-1</span>] = num;</span><br><span class="line">chess_board(posx,posy,posx+size<span class="number">-1</span>,posy+size<span class="number">-1</span>,size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//右上角</span></span><br><span class="line"><span class="keyword">if</span>( y&gt;=posy+size &amp;&amp; x&lt;posx+size )</span><br><span class="line">chess_board(posx,posy+size,x,y,size);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">board[posx+size<span class="number">-1</span>][posy+size] = num;</span><br><span class="line">chess_board(posx,posy+size,posx+size<span class="number">-1</span>,posy+size,size);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//左下角</span></span><br><span class="line"><span class="keyword">if</span>( x&gt;=posx+size &amp;&amp; y&lt;posy+size )</span><br><span class="line">chess_board(posx+size,posy,x,y,size);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">board[posx+size][posy+size<span class="number">-1</span>] = num;</span><br><span class="line">chess_board(posx+size,posy,posx+size,posy+size<span class="number">-1</span>,size);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//右下角</span></span><br><span class="line"><span class="keyword">if</span>( x&gt;=posx+size &amp;&amp; y&gt;=posy+size )</span><br><span class="line">chess_board(posx+size,posy+size,x,y,size);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">board[posx+size][posy+size] = num;</span><br><span class="line">chess_board(posx+size,posy+size,posx+size,posy+size,size);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、subproblem-reduction-graph-2"><a href="#2、subproblem-reduction-graph-2" class="headerlink" title="2、subproblem reduction graph"></a>2、subproblem reduction graph</h4><p>假设有如下图的一个棋盘，棋盘中有一个特殊方格：</p><p><img src="/2018/10/04/算法课第一次作业-选做1-5-6/37.png" alt=""></p><p>第一次分割：</p><p><img src="/2018/10/04/算法课第一次作业-选做1-5-6/38.png" alt=""></p><p>第二次分割：</p><p><img src="/2018/10/04/算法课第一次作业-选做1-5-6/39.png" alt=""></p><p>第三次分割：</p><p><img src="/2018/10/04/算法课第一次作业-选做1-5-6/310.png" alt=""></p><p>第四次分割：</p><p><img src="/2018/10/04/算法课第一次作业-选做1-5-6/311.png" alt=""></p><p>最后解的形式如下图所示（右下角空）：</p><p><img src="/2018/10/04/算法课第一次作业-选做1-5-6/314.png" alt=""></p><h4 id="3、prove-the-correctness-2"><a href="#3、prove-the-correctness-2" class="headerlink" title="3、prove the correctness"></a>3、prove the correctness</h4><p>使用数学归纳法：</p><p>（1）k = 1 时, 有解</p><p><img src="/2018/10/04/算法课第一次作业-选做1-5-6/33.png" alt=""></p><p>（2）k = 2 时，有解：</p><p><img src="/2018/10/04/算法课第一次作业-选做1-5-6/34.png" alt=""></p><p>（3）设 k-1 时成立(k&gt;2)，将 2^k <em> 2^k 棋盘分割为 4 个 2^(k-1) </em> 2^(k-1) 子棋盘，如下图所示：</p><p><img src="/2018/10/04/算法课第一次作业-选做1-5-6/36.png" alt=""></p><p>特殊方格必位于 4 个较小子棋盘之一中，其余 3 个子棋盘中无特殊方格。为了将这 3 个无特殊方格的子棋盘转化为特殊盘，我们可以用一个 L 型骨牌覆盖这 3 个较小的棋盘的汇合处，如下图所示，这 3 个子棋盘上被 L 型骨牌覆盖的方格就成为该棋盘上的特殊方格，从而将原问题化为 4 个较小规模的棋盘覆盖问题。递归的使用这种分割，直至棋盘简化为 2^1x2^1 棋盘。</p><p><img src="/2018/10/04/算法课第一次作业-选做1-5-6/312.png" alt=""></p><p>综上可得，该算法正确，最终可求得想要的结果。</p><h4 id="4、the-complexity-of-this-algorithm-2"><a href="#4、the-complexity-of-this-algorithm-2" class="headerlink" title="4、the complexity of this algorithm"></a>4、the complexity of this algorithm</h4><p>算法的时间复杂度递推式如下：</p><p><img src="/2018/10/04/算法课第一次作业-选做1-5-6/43.png" alt=""></p><p>即：</p><p><img src="/2018/10/04/算法课第一次作业-选做1-5-6/44.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、Divide-and-Conquer&quot;&gt;&lt;a href=&quot;#一、Divide-and-Conquer&quot; class=&quot;headerlink&quot; title=&quot;一、Divide and Conquer&quot;&gt;&lt;/a&gt;一、Divide and Conquer&lt;/h3&gt;&lt;p&gt;　　You are interested in analyzing some hard-to-obtain data from two separate databases. Each database contains n numerical values, so there are 2n values total and you may assume that no two values are the same. You’d like to determine the median of this set of 2n values, which we will define here to be the n-th　smallest value.&lt;/p&gt;
&lt;p&gt;　　However, the only way you can access these values is through queries to the databases. In a single query, you can specify a value k to one of the two databases, and the chosen database will return the kth smallest value that it contains. Since queries are expensive, you would like to compute the median using as few queries as possible.&lt;/p&gt;
&lt;p&gt;Give an algorithm that finds the median value using at most O(logn) queries.　　&lt;/p&gt;
&lt;h4 id=&quot;1、problem-solving-ideas-and-pseudo-code&quot;&gt;&lt;a href=&quot;#1、problem-solving-ideas-and-pseudo-code&quot; class=&quot;headerlink&quot; title=&quot;1、problem-solving ideas and pseudo-code&quot;&gt;&lt;/a&gt;1、problem-solving ideas and pseudo-code&lt;/h4&gt;&lt;p&gt;首先将现实问题转化一下，变成计算机算法问题，即 &lt;strong&gt;找2个有序数组的并集的中位数&lt;/strong&gt; ，&lt;a href=&quot;https://leetcode-cn.com/problems/median-of-two-sorted-arrays/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode 第四题&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(1）problem-solving ideas&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;求中位数需要根据数组长度是奇数还是偶数分别讨论，奇数长度时中位数为最中间的一个数，偶数长度时中位数为最中间的两个数的平均值，为了方便，可以实现一个比题目更一般化的函数，求A和B的第k小数的函数，那么中位数的问题很容易解决。&lt;/p&gt;
&lt;p&gt;求一个有序数组的第k个数只需要O(1)的复杂度，现在有两个数组，显然花费额外空间以O(n)时间归并然后O(1)寻找不满足题目要求。既然要求log时间复杂度，一般需要使用到二分思想。&lt;/p&gt;
&lt;p&gt;分别考虑A和B的第k/2个元素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果它们相等，则第k个数为其中的任意一个&lt;/li&gt;
&lt;li&gt;如果A中的比较大，则B中前k/2个元素都不可能是第k个数了，因为这个数至少应该为A的第k/2个数，把B的前k/2去掉，然后重新寻找。&lt;/li&gt;
&lt;li&gt;如果B中的比较大，则把A的前k/2个数去掉，重新寻找。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;直到A和B中某个变为空时或者寻找第1个数时可以停止递归，直接找到结果。&lt;/p&gt;
&lt;p&gt;注意，上面的k/2只是理想的简单情况，实际上A和B的长度可能不够k/2，或者k为奇数等，但这些不是主要问题，可以让A取第k/2个数字，然后A不够长，则取A的最后一个数字，然后B取剩下长度对应的那个数字，具体参考代码。&lt;/p&gt;
    
    </summary>
    
      <category term="算法课" scheme="https://wangjibao.com.cn/categories/%E7%AE%97%E6%B3%95%E8%AF%BE/"/>
    
    
      <category term="算法课" scheme="https://wangjibao.com.cn/tags/%E7%AE%97%E6%B3%95%E8%AF%BE/"/>
    
  </entry>
  
  <entry>
    <title>算法课OJ作业</title>
    <link href="https://wangjibao.com.cn/2018/10/03/%E7%AE%97%E6%B3%95%E8%AF%BEOJ%E4%BD%9C%E4%B8%9A/"/>
    <id>https://wangjibao.com.cn/2018/10/03/算法课OJ作业/</id>
    <published>2018-10-03T05:57:28.000Z</published>
    <updated>2018-10-20T05:55:13.364Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、第一次OJ作业（divide-and-conquer"><a href="#1、第一次OJ作业（divide-and-conquer" class="headerlink" title="1、第一次OJ作业（divide and conquer)"></a>1、第一次OJ作业（divide and conquer)</h2><p>1、寻找第K大数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findKthLargest</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; small, big;</span><br><span class="line">        srand(time(<span class="literal">NULL</span>));</span><br><span class="line">        <span class="keyword">int</span> pivotIndex = rand()%nums.size();</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.size(); i++ )&#123;</span><br><span class="line">            <span class="keyword">if</span>( i==pivotIndex )</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>( nums[i]&gt;nums[pivotIndex] )</span><br><span class="line">                big.push_back(nums[i]);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                small.push_back(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>( big.size() == k<span class="number">-1</span> )</span><br><span class="line">            <span class="keyword">return</span> nums[pivotIndex];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>( big.size() &gt; k<span class="number">-1</span> )</span><br><span class="line">            <span class="keyword">return</span> findKthLargest( big, k );</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> findKthLargest( small, k-big.size()<span class="number">-1</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, k;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++ )&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num);</span><br><span class="line">        vec.push_back(num);</span><br><span class="line">    &#125;</span><br><span class="line">    Solution s;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s.findKthLargest(vec,k) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>2、二维最近点对</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt; pair&lt;<span class="keyword">double</span>, <span class="keyword">double</span>&gt; &gt; point;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">calcDist</span><span class="params">( pair&lt;<span class="keyword">double</span>, <span class="keyword">double</span>&gt; p1, pair&lt;<span class="keyword">double</span>, <span class="keyword">double</span>&gt; p2 )</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (p1.first-p2.first)*(p1.first-p2.first) + (p1.second-p2.second)*(p1.second-p2.second);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">compare_x</span><span class="params">( pair&lt;<span class="keyword">double</span>, <span class="keyword">double</span>&gt; p1, pair&lt;<span class="keyword">double</span>,<span class="keyword">double</span>&gt; p2 )</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> p1.first&lt;p2.first;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">compare_y</span><span class="params">( pair&lt;<span class="keyword">double</span>, <span class="keyword">double</span>&gt; p1, pair&lt;<span class="keyword">double</span>,<span class="keyword">double</span>&gt; p2 )</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> p1.second&lt;p2.second;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pair&lt; pair&lt;<span class="keyword">double</span>, <span class="keyword">double</span>&gt;, pair&lt;<span class="keyword">double</span>, <span class="keyword">double</span>&gt; &gt; solution( <span class="built_in">vector</span>&lt; pair&lt;<span class="keyword">double</span>, <span class="keyword">double</span>&gt; &gt;&amp; vec )&#123;</span><br><span class="line">    <span class="keyword">if</span>( vec.size()&lt;=<span class="number">3</span> )&#123; <span class="comment">//当点的个数小于3个时，直接暴力求解,想一下为啥是3</span></span><br><span class="line">        pair&lt; pair&lt;<span class="keyword">double</span>, <span class="keyword">double</span>&gt;, pair&lt;<span class="keyword">double</span>, <span class="keyword">double</span>&gt; &gt; ans = make_pair(vec[<span class="number">0</span>], vec[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">if</span>( vec.size()==<span class="number">3</span> )&#123;</span><br><span class="line">            <span class="keyword">double</span> dst01 = calcDist( vec[<span class="number">0</span>], vec[<span class="number">1</span>] );</span><br><span class="line">            <span class="keyword">double</span> dst12 = calcDist( vec[<span class="number">1</span>], vec[<span class="number">2</span>] );</span><br><span class="line">            <span class="keyword">if</span>( dst01&gt;dst12 )</span><br><span class="line">                ans = make_pair(vec[<span class="number">1</span>], vec[<span class="number">2</span>]);</span><br><span class="line">            <span class="keyword">double</span> dst02 = calcDist( vec[<span class="number">0</span>], vec[<span class="number">2</span>] );</span><br><span class="line">            <span class="keyword">if</span>( calcDist(ans.first, ans.second)&gt;dst02 )</span><br><span class="line">                ans = make_pair(vec[<span class="number">0</span>], vec[<span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//分开,左右两部分</span></span><br><span class="line">    sort( vec.begin(), vec.end(), compare_x );  <span class="comment">//并不是使用pivot，直接分一半过去</span></span><br><span class="line">    <span class="built_in">vector</span>&lt; pair&lt;<span class="keyword">double</span>, <span class="keyword">double</span>&gt; &gt; pointLeft( vec.size()/<span class="number">2</span> );</span><br><span class="line">    copy( vec.begin(), vec.begin()+vec.size()/<span class="number">2</span>, pointLeft.begin() );</span><br><span class="line">    <span class="built_in">vector</span>&lt; pair&lt;<span class="keyword">double</span>, <span class="keyword">double</span>&gt; &gt; pointRight( vec.size() - vec.size()/<span class="number">2</span> );</span><br><span class="line">    copy( vec.begin()+vec.size()/<span class="number">2</span>, vec.end(), pointRight.begin() );</span><br><span class="line">  </span><br><span class="line">    pair&lt; pair&lt;<span class="keyword">double</span>, <span class="keyword">double</span>&gt;, pair&lt;<span class="keyword">double</span>, <span class="keyword">double</span>&gt; &gt; ansLeft = solution( pointLeft );</span><br><span class="line">    pair&lt; pair&lt;<span class="keyword">double</span>, <span class="keyword">double</span>&gt;, pair&lt;<span class="keyword">double</span>, <span class="keyword">double</span>&gt; &gt; ansRight = solution( pointRight );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> dst = calcDist(ansLeft.first, ansLeft.second);</span><br><span class="line">    pair&lt; pair&lt;<span class="keyword">double</span>, <span class="keyword">double</span>&gt;, pair&lt;<span class="keyword">double</span>, <span class="keyword">double</span>&gt; &gt; ans = ansLeft;</span><br><span class="line">    <span class="keyword">if</span>( calcDist(ansLeft.first, ansLeft.second) &gt; calcDist(ansRight.first, ansRight.second) )&#123;</span><br><span class="line">        ans = ansRight;</span><br><span class="line">        dst = calcDist(ansRight.first, ansRight.second);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//计算中间</span></span><br><span class="line">    <span class="keyword">double</span> pivot = ( pointLeft[pointLeft.size()<span class="number">-1</span>].first + pointRight[<span class="number">0</span>].first ) / <span class="number">2.0</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt; pair&lt;<span class="keyword">double</span>, <span class="keyword">double</span>&gt; &gt; pointMiddle;</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">int</span> i=<span class="number">0</span>; i&lt;vec.size(); i++ )&#123;</span><br><span class="line">        <span class="keyword">if</span>( (pivot-vec[i].first)*(pivot-vec[i].first) &lt; dst )</span><br><span class="line">            pointMiddle.push_back( vec[i] );</span><br><span class="line">    &#125;</span><br><span class="line">    sort( pointMiddle.begin(), pointMiddle.end(), compare_y );</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">int</span> i=<span class="number">0</span>; i&lt;pointMiddle.size(); i++ )&#123;</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=<span class="number">7</span> &amp;&amp; (i+j)&lt;pointMiddle.size(); j++ )&#123;</span><br><span class="line">            <span class="keyword">if</span>( calcDist( pointMiddle[i], pointMiddle[i+j] ) &lt; dst )&#123;</span><br><span class="line">                dst = calcDist( pointMiddle[i], pointMiddle[i+j] );</span><br><span class="line">                ans = make_pair( pointMiddle[i], pointMiddle[i+j] );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">double</span> x, y;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++ )&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lf %lf"</span>, &amp;x, &amp;y);</span><br><span class="line">        point.push_back( make_pair(x,y) );</span><br><span class="line">    &#125;</span><br><span class="line">    pair&lt; pair&lt;<span class="keyword">double</span>, <span class="keyword">double</span>&gt;, pair&lt;<span class="keyword">double</span>, <span class="keyword">double</span>&gt; &gt; ans;</span><br><span class="line">    ans = solution(point);</span><br><span class="line">    <span class="keyword">double</span> mindst = calcDist( ans.first, ans.second );</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.2f\n"</span>, <span class="built_in">sqrt</span>(<span class="number">1.0</span>*mindst));</span><br><span class="line">    <span class="comment">//cout &lt;&lt; "(" &lt;&lt; ans.first.first &lt;&lt; "," &lt;&lt; ans.first.second &lt;&lt; ")" &lt;&lt; ",  (" &lt;&lt; ans.second.first &lt;&lt; "," &lt;&lt; ans.second.second &lt;&lt; ")" &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、第二次OJ作业-dynamic-programming"><a href="#2、第二次OJ作业-dynamic-programming" class="headerlink" title="2、第二次OJ作业 (dynamic programming)"></a>2、第二次OJ作业 (dynamic programming)</h2><p>1、LIS，DP入门第一题，没啥好说的，只要想清楚为啥每次将新来的数据往 <code>ans</code> 数组里插入，最后出来的就一定是最长的就可以了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num, T, N;</span><br><span class="line">    <span class="keyword">int</span> length, index;</span><br><span class="line">    <span class="keyword">int</span> ans[<span class="number">100005</span>];</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">int</span> t = <span class="number">0</span>; t&lt;T; t++ )&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line">        length = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(ans, <span class="number">-1</span>, <span class="keyword">sizeof</span>(ans));</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++ )&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;num);</span><br><span class="line">            index = lower_bound( ans, ans+length, num ) - ans;</span><br><span class="line">            ans[index] = num;</span><br><span class="line">            <span class="keyword">if</span>( index==length )</span><br><span class="line">                length++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; length &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、入门级题目外加了求 <code>K</code> 个最优值的条件，昨晚1点多打开题目，感觉随便码一码随便A掉，于是上床 睡觉，躺床上拍脑袋理论AC。仔细一想，K个最优值的状态转移，有点问题啊，带着疑问入睡不咋舒坦，大半夜将题目发到<code>315</code>群，杨老师帅气得给出了解决方案，顺带嘲笑了一波数据；炸老师看了数据量也嘲讽了一波；早上起来交了一发，发现 <code>0 ms</code>的时候，也疯狂鄙视一波，数据真的弱得不行。</p><p>想起来当年 <code>ycb</code> 的誓言：</p><p><img src="/2018/10/03/算法课OJ作业/ycb.jpeg" alt=""></p><p><img src="/2018/10/03/算法课OJ作业/dp1.png" alt=""></p><p><img src="/2018/10/03/算法课OJ作业/dp2.png" alt=""></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m, n, k;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line">priority_queue&lt;<span class="keyword">int</span>&gt; ans[<span class="number">105</span>], cur_ans, tmp_ans;<span class="comment">//默认大堆</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ans[<span class="number">1</span>].push(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++ )&#123;</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++ )&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num);</span><br><span class="line">            <span class="keyword">while</span>( !cur_ans.empty() )&#123;  <span class="comment">//清空cur_ans</span></span><br><span class="line">                cur_ans.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            tmp_ans = ans[j<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">while</span>( !ans[j<span class="number">-1</span>].empty() )&#123;</span><br><span class="line">                cur_ans.push(ans[j<span class="number">-1</span>].top()+num);</span><br><span class="line">                ans[j<span class="number">-1</span>].pop();</span><br><span class="line">            &#125;</span><br><span class="line">            ans[j<span class="number">-1</span>] = tmp_ans;</span><br><span class="line">            <span class="keyword">while</span>( !ans[j].empty() )&#123;</span><br><span class="line">                cur_ans.push(ans[j].top()+num);</span><br><span class="line">                ans[j].pop();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>( ans[j].size()&lt;k &amp;&amp; !cur_ans.empty() )&#123;</span><br><span class="line">                ans[j].push(cur_ans.top());</span><br><span class="line">                cur_ans.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans[n].top();</span><br><span class="line">    ans[n].pop();</span><br><span class="line">    <span class="keyword">while</span>( !ans[n].empty() )&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; ans[n].top();</span><br><span class="line">        ans[n].pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、第一次OJ作业（divide-and-conquer&quot;&gt;&lt;a href=&quot;#1、第一次OJ作业（divide-and-conquer&quot; class=&quot;headerlink&quot; title=&quot;1、第一次OJ作业（divide and conquer)&quot;&gt;&lt;/a&gt;1、第一次OJ作业（divide and conquer)&lt;/h2&gt;&lt;p&gt;1、寻找第K大数&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;findKthLargest&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; nums, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; k)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; small, big;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        srand(time(&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; pivotIndex = rand()%nums.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;( &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;nums.size(); i++ )&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( i==pivotIndex )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( nums[i]&amp;gt;nums[pivotIndex] )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                big.push_back(nums[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                small.push_back(nums[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( big.size() == k&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt; )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; nums[pivotIndex];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( big.size() &amp;gt; k&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt; )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; findKthLargest( big, k );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; findKthLargest( small, k-big.size()&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n, k;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cin&lt;/span&gt; &amp;gt;&amp;gt; n &amp;gt;&amp;gt; k;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; vec;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; num;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;( &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;n; i++ )&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d&quot;&lt;/span&gt;, &amp;amp;num);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        vec.push_back(num);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Solution s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; s.findKthLargest(vec,k) &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="算法课" scheme="https://wangjibao.com.cn/categories/%E7%AE%97%E6%B3%95%E8%AF%BE/"/>
    
    
      <category term="算法课" scheme="https://wangjibao.com.cn/tags/%E7%AE%97%E6%B3%95%E8%AF%BE/"/>
    
  </entry>
  
  <entry>
    <title>矩阵求导</title>
    <link href="https://wangjibao.com.cn/2018/09/29/%E7%9F%A9%E9%98%B5%E6%B1%82%E5%AF%BC/"/>
    <id>https://wangjibao.com.cn/2018/09/29/矩阵求导/</id>
    <published>2018-09-29T09:36:07.000Z</published>
    <updated>2018-10-05T14:22:36.817Z</updated>
    
    <content type="html"><![CDATA[<p>最近上课，各种机器学习，深度学习的求导公式，直接蒙圈了，一个不错的教程文档，分享一下。</p><div class="row">    <embed src="matrix_rules.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近上课，各种机器学习，深度学习的求导公式，直接蒙圈了，一个不错的教程文档，分享一下。&lt;/p&gt;


	&lt;div class=&quot;row&quot;&gt;
    &lt;embed src=&quot;matrix_rules.pdf&quot; width=&quot;100%&quot; height=&quot;550&quot; type=&quot;ap
      
    
    </summary>
    
      <category term="资料" scheme="https://wangjibao.com.cn/categories/%E8%B5%84%E6%96%99/"/>
    
    
      <category term="资料" scheme="https://wangjibao.com.cn/tags/%E8%B5%84%E6%96%99/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode1-10</title>
    <link href="https://wangjibao.com.cn/2018/09/28/LeetCode1-10/"/>
    <id>https://wangjibao.com.cn/2018/09/28/LeetCode1-10/</id>
    <published>2018-09-28T13:06:07.000Z</published>
    <updated>2018-10-20T11:50:37.904Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、两数之和"><a href="#1、两数之和" class="headerlink" title="1、两数之和"></a>1、<a href="https://leetcode-cn.com/problems/two-sum" target="_blank" rel="noopener">两数之和</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; Map;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.size(); i++)</span><br><span class="line">            Map[nums[i]] = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = target - nums[i];</span><br><span class="line">            <span class="keyword">if</span>( Map.count(tmp) &amp;&amp; Map[tmp]!=i )&#123;</span><br><span class="line">                ans.push_back(i);</span><br><span class="line">                ans.push_back(Map[tmp]);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2、两数相加"><a href="#2、两数相加" class="headerlink" title="2、两数相加"></a>2、<a href="https://leetcode-cn.com/problems/add-two-numbers" target="_blank" rel="noopener">两数相加</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        ListNode* res = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        ListNode* tmp = res;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>( l1 || l2 )&#123;</span><br><span class="line">            <span class="keyword">if</span>( l1 )&#123;</span><br><span class="line">                sum += l1-&gt;val;</span><br><span class="line">                l1 = l1-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>( l2 )&#123;</span><br><span class="line">                sum += l2-&gt;val;</span><br><span class="line">                l2 = l2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            tmp-&gt;next = <span class="keyword">new</span> ListNode(sum%<span class="number">10</span>);</span><br><span class="line">            tmp = tmp-&gt;next;</span><br><span class="line">            sum /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>( sum )</span><br><span class="line">            tmp-&gt;next = <span class="keyword">new</span> ListNode(sum);</span><br><span class="line">        <span class="keyword">return</span> res-&gt;next;  <span class="comment">//解决的很是巧妙</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="3、无重复字符的最长子串"><a href="#3、无重复字符的最长子串" class="headerlink" title="3、无重复字符的最长子串"></a>3、<a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters" target="_blank" rel="noopener">无重复字符的最长子串</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i, j;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; mp;</span><br><span class="line">        <span class="keyword">for</span>( i=<span class="number">0</span>,j=<span class="number">0</span>; j&lt;s.length(); j++ )&#123;</span><br><span class="line">            <span class="keyword">if</span>( mp.count(s[j]) == <span class="number">0</span> )&#123;  <span class="comment">//map中之前不含有此元素</span></span><br><span class="line">                mp.insert(make_pair( s[j], j ));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;  <span class="comment">//map中之前含有此元素</span></span><br><span class="line">                ans = max( ans, j-i );</span><br><span class="line">                i = max( mp[s[j]]+<span class="number">1</span>, i );</span><br><span class="line">                mp[s[j]] = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = max( ans, j-i ); <span class="comment">//到字符串的结尾了，需要处理</span></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="4、两个排序数组的中位数"><a href="#4、两个排序数组的中位数" class="headerlink" title="4、两个排序数组的中位数"></a>4、<a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays" target="_blank" rel="noopener">两个排序数组的中位数</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> totalLength = nums1.size() + nums2.size();</span><br><span class="line">        <span class="keyword">if</span>( totalLength&amp;<span class="number">1</span> )</span><br><span class="line">            <span class="keyword">return</span> findKth( nums1.begin(), nums1.size(), nums2.begin(), nums2.size(), (totalLength&gt;&gt;<span class="number">1</span>)+<span class="number">1</span> );</span><br><span class="line">        <span class="keyword">else</span> <span class="comment">//除以 2.0 是为了保留小数点</span></span><br><span class="line">            <span class="keyword">return</span> (findKth( nums1.begin(), nums1.size(), nums2.begin(), nums2.size(), (totalLength&gt;&gt;<span class="number">1</span>) ) + findKth( nums1.begin(), nums1.size(), nums2.begin(), nums2.size(), (totalLength&gt;&gt;<span class="number">1</span>)+<span class="number">1</span> ))/<span class="number">2.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findKth</span><span class="params">( <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;:: iterator nums1, <span class="keyword">int</span> len1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;:: iterator nums2, <span class="keyword">int</span> len2, <span class="keyword">int</span> k )</span></span>&#123;</span><br><span class="line">        <span class="comment">// 默认 len1 要大于 len2</span></span><br><span class="line">        <span class="keyword">if</span>( len1&lt;len2 )</span><br><span class="line">            <span class="keyword">return</span> findKth( nums2, len2, nums1, len1, k );</span><br><span class="line">        <span class="keyword">if</span>( len2==<span class="number">0</span> )</span><br><span class="line">            <span class="keyword">return</span> nums1[k<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">if</span>( k==<span class="number">1</span> )  <span class="comment">//k==1做特判，因为后期要移位, 不做特判point-1会出现负值</span></span><br><span class="line">            <span class="keyword">return</span> min( nums1[<span class="number">0</span>], nums2[<span class="number">0</span>] );</span><br><span class="line">        <span class="keyword">int</span> point2 = min( k&gt;&gt;<span class="number">1</span>, len2 );</span><br><span class="line">        <span class="keyword">int</span> point1 = k - point2;</span><br><span class="line">        <span class="comment">//下面对 nums1[point1-1] 和 nums2[point2-1]的大小关系进行讨论</span></span><br><span class="line">        <span class="keyword">if</span>( nums1[point1<span class="number">-1</span>] &gt; nums2[point2<span class="number">-1</span>] )</span><br><span class="line">            <span class="keyword">return</span> findKth( nums1, point1, nums2+point2, len2-point2, k-point2 );</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>( nums1[point1<span class="number">-1</span>] &lt; nums2[point2<span class="number">-1</span>] )</span><br><span class="line">            <span class="keyword">return</span> findKth( nums1+point1, len1-point1, nums2, point2, k-point1 );</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> nums1[point1<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5、最长回文子串"><a href="#5、最长回文子串" class="headerlink" title="5、最长回文子串"></a>5、<a href="https://leetcode-cn.com/problems/longest-palindromic-substring" target="_blank" rel="noopener">最长回文子串</a></h2><p><a href="https://segmentfault.com/a/1190000003914228" target="_blank" rel="noopener">Manacher</a>算法，国内也叫“马拉车”。虽然 <code>RL[i]=min(RL[2*pos-i], MaxRight-i)</code>，但是位于 i  半径右边界与 MaxRight之间的元素是不会被重复遍历的，否则会与 i 的对称 j  起冲突，也正因为如此，算法的复杂度是 O(n)。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">longestPalindrome</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> newString = <span class="string">"#"</span>;</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> i=<span class="number">0</span>; i&lt;s.length(); i++ )&#123;</span><br><span class="line">            newString += s[i];</span><br><span class="line">            newString += <span class="string">"#"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> maxLen = <span class="number">0</span>, maxLenIndex = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> maxRight=<span class="number">0</span>, pos=<span class="number">0</span>; <span class="comment">//代表当前最右及其对应中心元的位置</span></span><br><span class="line">        <span class="keyword">int</span> radius[newString.length()];</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> i=<span class="number">0</span>; i&lt;newString.length(); i++ )&#123;</span><br><span class="line">            <span class="keyword">if</span>( i&lt;maxRight )</span><br><span class="line">                radius[i] = min( radius[<span class="number">2</span>*pos-i], maxRight-i+<span class="number">1</span> ); <span class="comment">//注意这里的 +1</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                radius[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>( (i+radius[i])&lt;newString.length() &amp;&amp; (i-radius[i])&gt;=<span class="number">0</span> &amp;&amp; newString[i+radius[i]]==newString[i-radius[i]] )&#123; <span class="comment">// i+radius[i]-1为当前所到位置</span></span><br><span class="line">                radius[i] += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//更新 maxRight 和 pos</span></span><br><span class="line">            <span class="keyword">if</span>( (i+radius[i]<span class="number">-1</span>)&gt;maxRight )&#123;</span><br><span class="line">                maxRight = i+radius[i]<span class="number">-1</span>;</span><br><span class="line">                pos = i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>( maxLen&lt;radius[i] )&#123;</span><br><span class="line">                maxLen = radius[i];</span><br><span class="line">                maxLenIndex = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">string</span> ansString = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> i=maxLenIndex-radius[maxLenIndex]+<span class="number">1</span>; i&lt;maxLenIndex+radius[maxLenIndex]<span class="number">-1</span>; i++ )&#123;</span><br><span class="line">            <span class="keyword">if</span>( newString[i]!=<span class="string">'#'</span> )</span><br><span class="line">                ansString += newString[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ansString;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="6、Z字形变换"><a href="#6、Z字形变换" class="headerlink" title="6、Z字形变换"></a>6、<a href="https://leetcode-cn.com/problems/zigzag-conversion" target="_blank" rel="noopener">Z字形变换</a></h2><p>规律题，多些几个即可找到下标间的规律。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">convert</span><span class="params">(<span class="built_in">string</span> s, <span class="keyword">int</span> numRows)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( numRows==<span class="number">1</span> )</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        <span class="built_in">string</span> ans = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">int</span> total = <span class="number">2</span>*numRows - <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> curNum, pos;</span><br><span class="line">        pos = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            ans += s[pos];</span><br><span class="line">            pos += total;</span><br><span class="line">        &#125;<span class="keyword">while</span>( pos&lt;s.length() );</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> i=<span class="number">1</span>; i&lt;numRows<span class="number">-1</span>; i++ )&#123;</span><br><span class="line">            curNum = total - <span class="number">2</span>*i;</span><br><span class="line">            pos = i;</span><br><span class="line">            <span class="keyword">do</span>&#123;</span><br><span class="line">                ans += s[pos];</span><br><span class="line">                pos += curNum;</span><br><span class="line">                curNum = total - curNum;</span><br><span class="line">            &#125;<span class="keyword">while</span>( pos&lt;s.length() );</span><br><span class="line">        &#125;</span><br><span class="line">        pos = numRows - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            ans += s[pos];</span><br><span class="line">            pos += total;</span><br><span class="line">        &#125;<span class="keyword">while</span>( pos&lt;s.length() );</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="7、反转整数"><a href="#7、反转整数" class="headerlink" title="7、反转整数"></a>7、<a href="https://leetcode-cn.com/problems/reverse-integer" target="_blank" rel="noopener">反转整数</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> flag = x&lt;<span class="number">0</span>? <span class="number">-1</span>:<span class="number">1</span>;</span><br><span class="line">        x = <span class="built_in">abs</span>(x);</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            num = <span class="number">10</span>*num + x%<span class="number">10</span>;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">        &#125;<span class="keyword">while</span>(x);</span><br><span class="line">        num = num*flag;</span><br><span class="line">        <span class="keyword">if</span>( num&gt;INT_MAX || num&lt;INT_MIN )</span><br><span class="line">            num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">int</span>(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="8、字符串转整数-atoi"><a href="#8、字符串转整数-atoi" class="headerlink" title="8、字符串转整数 (atoi)"></a>8、<a href="https://leetcode-cn.com/problems/string-to-integer-atoi" target="_blank" rel="noopener">字符串转整数 (atoi)</a></h2><p>一个简单的模拟题，但不得不说leetcode的测试用例真的是强，考虑了 -1 ，给我报 +1的错，两者都考虑了，报了 -+1 的错，真的每一个可能但错误的细节都考虑到了，强！</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">myAtoi</span><span class="params">(<span class="built_in">string</span> str)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//先将开始的空余字符去掉</span></span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> index=<span class="number">0</span>; index&lt;str.length(); index++ )&#123;</span><br><span class="line">            <span class="keyword">if</span>( str[index]!=<span class="string">' '</span> )&#123;</span><br><span class="line">                str = str.substr(index);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>( str[<span class="number">0</span>]==<span class="string">'-'</span> )&#123;</span><br><span class="line">            flag = <span class="number">-1</span>;</span><br><span class="line">            str = str.substr(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>( str[<span class="number">0</span>]==<span class="string">'+'</span> )&#123;</span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">            str = str.substr(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> i=<span class="number">0</span>; i&lt;str.length(); i++ )&#123;</span><br><span class="line">            <span class="keyword">if</span>( str[i]&gt;=<span class="string">'0'</span> &amp;&amp; str[i]&lt;=<span class="string">'9'</span> )&#123;</span><br><span class="line">                num = num*<span class="number">10</span> + (str[i]-<span class="string">'0'</span>);</span><br><span class="line">                <span class="keyword">if</span>( flag*num &lt; INT_MIN )</span><br><span class="line">                    <span class="keyword">return</span> INT_MIN;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>( flag*num &gt; INT_MAX )</span><br><span class="line">                    <span class="keyword">return</span> INT_MAX;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag*num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="9、回文数"><a href="#9、回文数" class="headerlink" title="9、回文数"></a>9、<a href="https://leetcode-cn.com/problems/palindrome-number" target="_blank" rel="noopener">回文数</a></h2><p>将数字倒过来，比较前后两个数是否相同即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( x&lt;<span class="number">0</span> )  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">int</span> y = <span class="number">0</span>, tmp_x = x;</span><br><span class="line">        <span class="keyword">while</span>( tmp_x )&#123;</span><br><span class="line">            y = <span class="number">10</span>*y+(tmp_x%<span class="number">10</span>);</span><br><span class="line">            tmp_x /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x==y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="10、正则表达式匹配"><a href="#10、正则表达式匹配" class="headerlink" title="10、正则表达式匹配"></a>10、<a href="https://leetcode-cn.com/problems/regular-expression-matching" target="_blank" rel="noopener">正则表达式匹配</a></h2><p>动态规划的思想来解决这道题目，对于动态规划类的题目，是比较难的，难在状态转移方程写不出来。</p><p>首先，<code>dp[i][j]</code>表示 <code>s</code> 中前 <code>i</code> 个字符和 <code>p</code> 中的前 <code>j</code> 个字符是否匹配。下面对 <code>p</code> 中的第 <code>j</code> 个字符是否是 <code>*</code> 号进行分类讨论（至于为啥是以<code>*</code>号为关键字符进行讨论，自己想想，脑补脑补）。</p><p>1、 <code>p[j-1] != &#39;*&#39;</code>：</p><p><img src="/2018/09/28/LeetCode1-10/10_1.png" alt=""></p><p>只需要比较 <code>s[i-1]</code> 和 <code>p[j-1]</code> 是否匹配即可，匹配的条件为 <code>s[i-1]==p[j-1] || p[j-1]==&#39;.&#39;</code>，转移方程为：</p><p>　　<code>dp[i][j] = dp[i-1][j-1] &amp;&amp; (s[i-1]==p[j-1] || p[j-1]==&#39;.&#39;)</code></p><p>2、<code>p[j-1] == &#39;*&#39;</code>，分3类情况讨论：</p><ul><li><p><code>p[j-1]</code> 的 <code>*</code> 号不起作用，也就是没匹配，此情况下 <code>p[j-2]</code> 和 <code>p[j-1]</code>是作废的，转移方程:</p><p><code>dp[i][j] = dp[i][j-2]</code>  </p></li><li><p><code>p[j-1]</code> 的 <code>*</code> 号匹配一个字符，也就是 P 中的 <code>p[j-2] 和 p[j-1]</code> 所组成的元素和 S 中的 <code>s[i-1]</code>相匹配，所以状态转移方程为：</p><p><code>dp[i][j] = dp[i-1][j-2] &amp;&amp; (s[i-1]==p[j-2] || p[j-2]==&#39;.&#39;)</code> </p><p><img src="/2018/09/28/LeetCode1-10/10_2.png" alt=""></p></li><li><p><code>p[j-1]</code> 的 <code>*</code> 号匹配多个字符(&gt;=2)，如下图所示，很容易写出状态转移方程为：</p><p><code>dp[i][j] =dp[i-1][j] &amp;&amp; (s[i-1]==p[j-2] || p[j-2]==&#39;.&#39;)</code></p><p><img src="/2018/09/28/LeetCode1-10/10_3.png" alt=""></p><p>综上所述，总状态转移方程为：</p><p><img src="/2018/09/28/LeetCode1-10/10_4.png" alt=""></p></li></ul><p>接下来，对初始状态进行讨论：</p><ul><li><p>当 S 不空， P 为空时，<code>dp[i][0] = false</code></p></li><li><p>当 S 空， P 不空时： </p><p><code>j%2!=0</code> 时，<code>dp[0][j] = false</code></p><p> <code>j%2==0</code> 时， <code>dp[0][j] = dp[0][j-2] &amp;&amp; p[j-1]==&#39;*&#39;</code></p></li></ul><p>有了以上的分析，代码基本也就写完了，如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isMatch</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = s.length(), n = p.length();</span><br><span class="line">        <span class="keyword">bool</span> dp[m+<span class="number">1</span>][n+<span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;  <span class="comment">//都为空，肯定匹配</span></span><br><span class="line">        <span class="comment">// P为空</span></span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++ )</span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// S为空</span></span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++ )&#123;</span><br><span class="line">            <span class="keyword">if</span>( j%<span class="number">2</span>==<span class="number">0</span> )</span><br><span class="line">                dp[<span class="number">0</span>][j] = ( dp[<span class="number">0</span>][j<span class="number">-2</span>] &amp;&amp; (p[j<span class="number">-1</span>]==<span class="string">'*'</span>) );</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                dp[<span class="number">0</span>][j] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++ )&#123;</span><br><span class="line">            <span class="keyword">for</span>( <span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++ )&#123;</span><br><span class="line">                <span class="keyword">if</span>( p[j<span class="number">-1</span>]!=<span class="string">'*'</span> )</span><br><span class="line">                    dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>] &amp;&amp; ( s[i<span class="number">-1</span>]==p[j<span class="number">-1</span>] || p[j<span class="number">-1</span>]==<span class="string">'.'</span> );</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    dp[i][j] = dp[i][j<span class="number">-2</span>] || ( ( dp[i<span class="number">-1</span>][j<span class="number">-2</span>] || dp[i<span class="number">-1</span>][j] ) &amp;&amp; (s[i<span class="number">-1</span>]==p[j<span class="number">-2</span>] || p[j<span class="number">-2</span>]==<span class="string">'.'</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、两数之和&quot;&gt;&lt;a href=&quot;#1、两数之和&quot; class=&quot;headerlink&quot; title=&quot;1、两数之和&quot;&gt;&lt;/a&gt;1、&lt;a href=&quot;https://leetcode-cn.com/problems/two-sum&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;两数之和&lt;/a&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; twoSum(&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; nums, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; target) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;unordered_map&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; Map;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; ans;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;nums.size(); i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Map[nums[i]] = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;nums.size(); i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; tmp = target - nums[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( Map.count(tmp) &amp;amp;&amp;amp; Map[tmp]!=i )&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ans.push_back(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ans.push_back(Map[tmp]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ans;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;2、两数相加&quot;&gt;&lt;a href=&quot;#2、两数相加&quot; class=&quot;headerlink&quot; title=&quot;2、两数相加&quot;&gt;&lt;/a&gt;2、&lt;a href=&quot;https://leetcode-cn.com/problems/add-two-numbers&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;两数相加&lt;/a&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * Definition for singly-linked list.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * struct ListNode &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; *     int val;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; *     ListNode *next;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; *     ListNode(int x) : val(x), next(NULL) &amp;#123;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &amp;#125;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;ListNode* &lt;span class=&quot;title&quot;&gt;addTwoNumbers&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ListNode* l1, ListNode* l2)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ListNode* res = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ListNode(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ListNode* tmp = res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; sum = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;( l1 || l2 )&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( l1 )&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                sum += l1-&amp;gt;val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                l1 = l1-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( l2 )&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                sum += l2-&amp;gt;val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                l2 = l2-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            tmp-&amp;gt;next = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ListNode(sum%&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            tmp = tmp-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            sum /= &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( sum )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            tmp-&amp;gt;next = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ListNode(sum);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res-&amp;gt;next;  &lt;span class=&quot;comment&quot;&gt;//解决的很是巧妙&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="https://wangjibao.com.cn/categories/LeetCode/"/>
    
      <category term="LeetCode1-10" scheme="https://wangjibao.com.cn/categories/LeetCode/LeetCode1-10/"/>
    
    
      <category term="LeetCode" scheme="https://wangjibao.com.cn/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>GitHub Pages+Hexo+Next博客搭建记录</title>
    <link href="https://wangjibao.com.cn/2018/09/22/GitHub-Pages-Hexo-Next%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/"/>
    <id>https://wangjibao.com.cn/2018/09/22/GitHub-Pages-Hexo-Next博客搭建记录/</id>
    <published>2018-09-22T13:43:58.000Z</published>
    <updated>2018-10-20T05:40:50.542Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h2><p>　　大二的时候看见学长搭建的个人博客，感觉好高大上的样子，想着自己啥时候不再是哪个只会喊：<strong>哇、牛批、666、厉害厉害</strong>的傻逼选手，然后浪啊浪，突然有一天，CSP考试上考到了一个Markdown转HTML的大模拟题：<br><img src="/2018/09/22/GitHub-Pages-Hexo-Next博客搭建记录/CSP.png" alt="计算机软件能力认证考试系统">现场狂写2小时，黑箱测试最后只得20分，从此心理对MD留下了挥之不去的阴影，然后就没有了然后，此事不来了了之。大二的时候在<a href="https://blog.csdn.net/spring371327" target="_blank" rel="noopener">CSDN</a>上写过，但是感觉CSDN的广告是越来也严重了，上面，下面，左面，右面等等四面八方全是各种广告，于是乎，时隔三年，趁着中秋没钱出去浪啊，舍友也回家了，丧尸宿舍也搭建一个简单的个人博客吧，此文简单记录一下搭建过程。<br>本文使用的是 <a href="https://pages.github.com/" target="_blank" rel="noopener">Github pages</a> + <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a> + <a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">Next </a>主题。      </p><a id="more"></a><h2 id="2、基础环境搭建"><a href="#2、基础环境搭建" class="headerlink" title="2、基础环境搭建"></a>2、基础环境搭建</h2><h3 id="2-1-注册GitHub账号并创建IO仓库"><a href="#2-1-注册GitHub账号并创建IO仓库" class="headerlink" title="2.1 注册GitHub账号并创建IO仓库"></a>2.1 注册GitHub账号并创建IO仓库</h3><p>　　<a href="https://github.com/" target="_blank" rel="noopener">GitHub</a>作为全球最大的同性交友网站，在程序员心中的地位不亚与<del>PornHub</del>在宅男心中的地位，有过之而无不及啊，登录官网填写相关信息进行账号注册，然后创建一个和注册名相同的仓库(Repository)，注意一定要是下图这种格式<em>[username.github.io]</em>，因为github page每个账号只有一个。  </p><p><img src="/2018/09/22/GitHub-Pages-Hexo-Next博客搭建记录/repo.png" alt="Create New Repository"></p><p>　　现在，已经可以通过<a href="https://wangjibao.github.io/" target="_blank" rel="noopener">https://wangjibao.github.io/</a>来访问了，后面还会在这上面做更多的设置。</p><h3 id="2-2-安装node-js"><a href="#2-2-安装node-js" class="headerlink" title="2.2 安装node.js"></a>2.2 安装node.js</h3><p>　　Hexo是基于Node.js的，其实Node.js就是一个JavaScript的运行环境，用来生成我们所写的静态博客页面，去<a href="https://nodejs.org/en/" target="_blank" rel="noopener">官网</a>下载安装即可，并且会自动加入系统环境变量中。  　<br>　　其中的 <a href="https://www.npmjs.com.cn/" target="_blank" rel="noopener">npm</a>(Node Package Manager) 是随 node.js 一起安装的包管理工具，能解决NodeJS代码部署上的很多问题。常用命令如下:  </p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm install npm -g              #安装新版本的npm</span><br><span class="line">npm install                     #安装npm依赖包</span><br><span class="line">npm install &lt;Mouble Name&gt;       #安装包，分为全局安装和本地安装，全局安装添加 -g 参数</span><br><span class="line">npm uninstall &lt;Mouble Name&gt;     #卸载包</span><br><span class="line">npm update &lt;Mouble Name&gt;        #更新包</span><br><span class="line">npm list -g                     #列出所有的全局安装包</span><br></pre></td></tr></table></figure><h3 id="2-3-安装Git并配置SSH-Key"><a href="#2-3-安装Git并配置SSH-Key" class="headerlink" title="2.3 安装Ｇit并配置SSH Key"></a>2.3 安装Ｇit并配置SSH Key</h3><p>   Git是一个流行的版本控制工具，使用它和GitHub进行交互。前往Git<a href="https://git-scm.com/" target="_blank" rel="noopener">官网</a>下载安装到本地即可。  因为你要提交代码到GitHub必须得拥有权限，但是直接使用用户名+密码不安全，所以使用 SSH Key来解决本地和服务器的连接问题。  </p><p>   在Git Bash中执行：  <code>cd ~/.ssh</code>      ，检查本机存在的ssh秘钥。如果提示： <code>No such file or directory</code> 说明你是第一次使用git。</p><p>  <code>ssh-keygen -t rsa -C &quot;17600****26@163.com&quot;</code></p><p>  按照提示操作，最终会在用户目录下生成一个<code>id_rsa.pub</code>文件，这就是自己的公钥。复制里面的字符串到自己的GitHub中，<code>settings &gt;&gt; SSH and GPG keys &gt;&gt; New SSH Key</code>。</p><p><img src="/2018/09/22/GitHub-Pages-Hexo-Next博客搭建记录/ssh_key.png" alt="添加SSH Key"></p><p>执行如下命令，测试是否添加成功：</p><pre><code>`ssh -T git@github.com`</code></pre><p>同时在git bash中进行如下配置: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;wangjibao&quot;                 #github用户名</span><br><span class="line">git config --global user.email &quot;17600****26@163.com       #github注册邮箱</span><br></pre></td></tr></table></figure><h3 id="2-4-安装sublime"><a href="#2-4-安装sublime" class="headerlink" title="2.4 安装sublime"></a>2.4 安装sublime</h3><p>　　Sublime Text3，很方便快捷的代码编辑器，后期的很多文件修改编辑操作要借助此工具进行。<a href="https://www.sublimetext.com/" target="_blank" rel="noopener">官网</a>下载安装的软件本身是付费的，但我大天朝能用付费的软件，呵，开玩笑！百度一发好多激活码直接用。</p><h3 id="2-5-安装hexo"><a href="#2-5-安装hexo" class="headerlink" title="2.5 安装hexo"></a>2.5 安装hexo</h3><p>　　在某个目录下建一个文件夹，此文件夹作为hexo的工作区。在该文件夹中 <code>Git Bash Here</code>，执行如下命令安装hexo：<br>　　　<code>npm install -g hexo</code></p><p>   安装完成后，<code>hexo -v</code> 查看安装版本及是否安装成功。执行 <code>hexo init</code>，对此工作文件夹进行初始化<strong>（特别注意，此文件夹初始必须是空的，否则会报错）</strong>。完成后，将生成如下目录结构的文件树   </p><p><img src="/2018/09/22/GitHub-Pages-Hexo-Next博客搭建记录/file_tree.png" alt="文件目录树"></p><p>　　其中<code>_config.yml</code>是全局配置文件，<code>_posts</code>是放置博客文章的文件夹，具体各文件功能查看<a href="https://www.jekyll.com.cn/docs/structure/" target="_blank" rel="noopener">这里</a>。此时，我们执行  <code>hexo server</code>来启动Hexo服务，在浏览器中输入 <code>http://localhost:4000</code>查看初始效果。<img src="/2018/09/22/GitHub-Pages-Hexo-Next博客搭建记录/localhost4000.png" alt="Hexo初始效果"></p><p>  常用的 Hexo命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo -v              #查看版本信息</span><br><span class="line">hexo new &quot;tilte&quot;     #创建新文章，放在\source\_posts目录下</span><br><span class="line">hexo new page ***    #创建页面</span><br><span class="line">hexo generate        #用来生成静态文件，简写： hexo g</span><br><span class="line">hexo server          #开启服务器实现本地预览功能，简写：  hexo s</span><br><span class="line">hexo deploy          #部署网址，上传到github仓库，简写：  hexo d</span><br><span class="line">hexo clean           #清除缓存(db.json)和已生成的静态文件(public),例如在更换博客主题后执行该命令</span><br></pre></td></tr></table></figure><h3 id="2-6-域名购买及解析"><a href="#2-6-域名购买及解析" class="headerlink" title="2.6 域名购买及解析"></a>2.6 域名购买及解析</h3><p>　　前往<a href="https://www.aliyun.com/?utm_content=se_1000301881" target="_blank" rel="noopener">阿里云</a>购买属于自己的域名，当然，不买也是可以的，直接使用 <code>wangjibao.github.io</code>也能访问博客，只是为了博客更加个性化一点，遂购买一个属于自己的域名。购买完成后，前往域名解析页面设置域名解析，如下图：   </p><p><img src="/2018/09/22/GitHub-Pages-Hexo-Next博客搭建记录/dns.png" alt="域名解析"></p><p>　　其中第二行的IP地址是在<code>cmd</code>命令框中通过 <code>ping wangjibao.github.io</code> 命令得到。同时，在github pages的设置页面，填写购买的域名。   </p><p><img src="/2018/09/22/GitHub-Pages-Hexo-Next博客搭建记录/domain.png" alt="配置域名"></p><p>最后，在<code>source</code>文件夹中新建名为 <code>CNAME</code>的文件，在文件中填入<code>www.wangjibao.com.cn</code>；执行 <code>hexo g -d</code>命令，此时，即可通过在浏览器中的地址栏输入 <code>www.wangjibao.com.cn</code> 进行博客的浏览。</p><h3 id="2-7-本地与Github连接"><a href="#2-7-本地与Github连接" class="headerlink" title="2.7 本地与Github连接"></a>2.7 本地与Github连接</h3><p>　　之前已经配置好了SSH Key，此时只要修改一下<code>_config.yml</code>文件即可轻松实现本地博文发布。修改<code>_config.yml</code>如下：</p><p><img src="/2018/09/22/GitHub-Pages-Hexo-Next博客搭建记录/deploy.png" alt="deploy配置"></p><p>　其中<code>repository</code>的值在下图中获得，注意，此处每个字段的冒号后面都跟有一个空格，否则会出错。</p><p><img src="/2018/09/22/GitHub-Pages-Hexo-Next博客搭建记录/git_address.png" alt="git_address"></p><p>　在发布博文前，执行如下命令安装必要的插件：</p><p>　　　<code>npm install hexo-deployer-git --save</code></p><h3 id="2-8-配置NexT主题"><a href="#2-8-配置NexT主题" class="headerlink" title="2.8 配置NexT主题"></a>2.8 配置NexT主题</h3><p><a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">NexT</a>的官方说明文档，将各基础配置讲述得非常清楚，按照官方文档一步一步配置即可。包括：</p><ul><li><p>安装NexT </p><ul><li>下载主题</li><li>启用主题</li><li>验证主题  </li></ul></li><li><p>主题设定  </p><ul><li>选择Scheme（此处选用Gemini主题）</li><li>设置语言（zh-Hans）</li><li>设置菜单</li><li>设置侧栏</li><li>设置头像</li><li>设置作者昵称</li><li>设置站点描述</li></ul></li><li><p>设置RSS（<code>hexo install hexo-generator-feed --save</code>）</p></li><li><p>添加标签页面</p></li><li><p>添加分类页面</p></li><li><p>设置字体</p></li><li><p>设置代码高亮主题（<code>night eighties</code>）</p></li><li><p>侧边栏社交链接</p></li><li><p>开启打赏功能</p></li><li><p>设置友情链接</p></li><li><p>腾讯公益404页面  </p><p>此处官网提供的是 <code>http</code>模式的404页面，在<code>https</code>模式下蹦出的404页面会出现排版问题，如<code>firefox</code>会报 <code>Mixed Active Content</code>警告，如图：  </p><p><img src="/2018/09/22/GitHub-Pages-Hexo-Next博客搭建记录/404warning.png" alt="404warning"></p><p>两种解决方案，一种是关掉浏览器对此站点的保护功能，但却不是很实用，因为你不能要求所有人解除对你站点的保护。  </p><p><img src="/2018/09/22/GitHub-Pages-Hexo-Next博客搭建记录/404prevent.png" alt="解除浏览器的保护"></p><p>第二种解决方案是，将官网提供的404页面的代码做一下修改，具体如下：   </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-type"</span> <span class="attr">content</span>=<span class="string">"text/html;charset=utf-8;"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge,chrome=1"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"robots"</span> <span class="attr">content</span>=<span class="string">"all"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"robots"</span> <span class="attr">content</span>=<span class="string">"index,follow"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js"</span> <span class="attr">homePageName</span>=<span class="string">"返回主页"</span> <span class="attr">homePageUrl</span>=<span class="string">"https://ymwangzhuan.com"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，改版后的404页面的<code>src</code>字段并没有指明使用的是<code>http</code>协议还是<code>https</code>协议，会自动根据你的站点做适配，问题完美解决[<em>注意将404.html放到站点根目录的<code>source</code>文件夹中</em>]。</p></li><li><p>站点建立时间</p></li><li><p>订阅微信公众号</p></li><li><p>设置背景动画     </p></li></ul><h2 id="3、NexT主题个性化设计"><a href="#3、NexT主题个性化设计" class="headerlink" title="3、NexT主题个性化设计"></a>3、NexT主题个性化设计</h2><h3 id="3-1-设置网站图标-Favicon"><a href="#3-1-设置网站图标-Favicon" class="headerlink" title="3.1 设置网站图标 Favicon"></a>3.1 设置网站图标 <code>Favicon</code></h3><p>在网上找一张32*32大小的 <code>ico</code> 图标，当然，不是 <code>ico</code> 格式也是可以的，如 <code>png</code> 等。将图标放到目录 <code>\thems\next\source\imges</code> 文件夹中，然后修改主题配置文件即可，操作如下图：  </p><p><img src="/2018/09/22/GitHub-Pages-Hexo-Next博客搭建记录/facion.png" alt="网站图标"></p><p>作为抓包组中的一员，搭建的博客必须上 <code>wireshark</code> 图标啊，皮一波~~，效果如下图：  </p><p><img src="/2018/09/22/GitHub-Pages-Hexo-Next博客搭建记录/facion_top.png" alt="facion图像展示"></p><h3 id="3-2-修改文章底部-号标签样式"><a href="#3-2-修改文章底部-号标签样式" class="headerlink" title="3.2 修改文章底部 # 号标签样式"></a>3.2 修改文章底部 <code>#</code> 号标签样式</h3><p>在 <code>\themes\next\layout\_macro\post.swing</code> 文件中搜索 <code>rel=&quot;tag&quot;&gt;#</code> ，将 <code>#</code> 号替换成 <code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code>，如下图：</p><p><img src="/2018/09/22/GitHub-Pages-Hexo-Next博客搭建记录/foot_tag.png" alt="footer_tag"></p><h3 id="3-3-文章末尾添加-本文结束-标记"><a href="#3-3-文章末尾添加-本文结束-标记" class="headerlink" title="3.3 文章末尾添加 本文结束 标记"></a>3.3 文章末尾添加 <code>本文结束</code> 标记</h3><p>添加<code>本文结束</code>标记的步骤，其实也是主题编写的基本步骤，主要分3步：</p><ol><li><p><strong>添加模板文件</strong> </p><p>在目录 <code>themes\next\layout\_macro</code>中新建名为 <code>passage-end-tag.swig</code>的文件，并添加如下代码：  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span> </span><br><span class="line">    &#123;% if not is_index %&#125; </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-align:center;color: #ccc;font-size:14px;"</span>&gt;</span></span><br><span class="line">            -------------本文结束<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-paw"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>感谢您的阅读------------</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125; </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>导入模板文件</strong><br>  在文件 <code>themes\next\layout\_macro\post.swig</code>中找到如下代码块（第332行）:</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;#####################&#125;</span><br><span class="line">&#123;### END POST BODY ###&#125;</span><br><span class="line">&#123;#####################&#125;</span><br></pre></td></tr></table></figure><p>  在此代码块的上面添加如下代码：  </p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      &#123;% if not is_index %&#125;</span><br><span class="line">          &#123;% include 'passage-end-tag.swig' %&#125;</span><br><span class="line">      &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>配置</strong>  </p><p>  在<strong>主题配置文件</strong>中添加 <code>passage-end-tag</code> 字段，并设置为 <code>true</code> ：  </p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 文章末尾添加“本文结束”标记</span><br><span class="line">passage_end_tag:</span><br><span class="line">  enabled: true</span><br></pre></td></tr></table></figure></li></ol><p>最终效果为：  </p><p><img src="/2018/09/22/GitHub-Pages-Hexo-Next博客搭建记录/end_presQ.png" alt="博文结束标记"></p><h3 id="3-4-添加顶部加载条"><a href="#3-4-添加顶部加载条" class="headerlink" title="3.4 添加顶部加载条"></a>3.4 添加顶部加载条</h3><p>在next主题的配置文件 <code>_config.yml</code> 中搜索关键词 <code>pace</code> ，设置为 <code>true</code> ，还可以设置加载条的样式，修改如下图所示：</p><p><img src="/2018/09/22/GitHub-Pages-Hexo-Next博客搭建记录/pace.png" alt="加载进度条"></p><h3 id="3-5-隐藏网站底部-由hexo强力驱动"><a href="#3-5-隐藏网站底部-由hexo强力驱动" class="headerlink" title="3.5 隐藏网站底部 由hexo强力驱动"></a>3.5 隐藏网站底部 <code>由hexo强力驱动</code></h3><p><strong>方案一：</strong>在目录 <code>themes\next\layout\_partials\</code>中打开 <code>footer.swig</code>文件，将对应网站底部的描述部分给注释掉即可，<code>html</code>的注释符 <code>&lt;!--  ****  --&gt;</code>：  </p><p><img src="/2018/09/22/GitHub-Pages-Hexo-Next博客搭建记录/hide_footer.png" alt="注释网站底部代码"> </p><p><strong>方案二：</strong>在主题配置文件中，配置 <code>powred</code>字段和<code>theme</code>字段，将其用 <code>#</code>号注释掉：  </p><p><img src="/2018/09/22/GitHub-Pages-Hexo-Next博客搭建记录/hide_footer2.png" alt="隐藏网站底部信息"></p><p>两者都能实现下图所示的效果：</p><p><img src="/2018/09/22/GitHub-Pages-Hexo-Next博客搭建记录/hide_footer_press.png" alt="注释网站底部信息效果图"></p><h3 id="3-6-博文置顶"><a href="#3-6-博文置顶" class="headerlink" title="3.6 博文置顶"></a>3.6 博文置顶</h3><p>使用 <code>top</code> 属性， <code>top</code> 值<strong>越大</strong>，排序就<strong>越靠前</strong>，如果文章不设置 <code>top</code> 属性，就按照博文的推送时间排序。如果使用的next主题在5.1之后，会自带此功能，修改<strong>站点配置文件</strong>中的 <code>order_by</code>字段即可；如果使用的是更老的版本，修改<code>node_modules\hexo-generator-index\lib\generator.js</code>中的内容即可，在<code>var posts =</code>那一行的后面添加如下博文排序函数：  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">posts.data = posts.data.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.top &amp;&amp; b.top) &#123; <span class="comment">// 两篇文章top都有定义</span></span><br><span class="line">        <span class="keyword">if</span>(a.top == b.top) <span class="keyword">return</span> b.date - a.date; <span class="comment">// 若top值一样则按照文章日期降序排</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> b.top - a.top; <span class="comment">// 否则按照top值降序排</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(a.top &amp;&amp; !b.top) &#123; <span class="comment">// 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(!a.top &amp;&amp; b.top) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> b.date - a.date; <span class="comment">// 都没定义按照文章日期降序排</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这里我们使用第二种方案，每次写文章的时候，都要手动添加 <code>top</code> 属性，很麻烦，这里，我们可以修改 <code>scaffolds\post.md</code> 文件，修改后的内容如下，其实相当于创建了一个博文的初始模板。  </p><p><img src="/2018/09/22/GitHub-Pages-Hexo-Next博客搭建记录/template.png" alt="新建博文模板"></p><p>到此，如果文章设置了 <code>top</code> 属性并有值得话，根据 <code>top</code> 值排序，没有的话，按照博文的推送时间排序。</p><h3 id="3-7-添加分享"><a href="#3-7-添加分享" class="headerlink" title="3.7 添加分享"></a>3.7 添加分享</h3><p>NexT主题支持多种方式的分享，包括 <code>Baidu Share</code> 、<code>duoshuo_share</code>、<code>needMoreShare2</code>、<code>jiathis</code>等等，这里我们使用<code>needMoreShare2</code>，在主题配置文件中修改对应的字段如下图所示，资深抓包民工表示对这里的很多软件好熟悉~，怕是要被打~</p><p><img src="/2018/09/22/GitHub-Pages-Hexo-Next博客搭建记录/share.png" alt="分享"></p><p>修改后，执行 <code>hexo g -d</code>指令，效果如图：  </p><p><img src="/2018/09/22/GitHub-Pages-Hexo-Next博客搭建记录/share_press.png" alt="分享效果图"></p><h3 id="3-8-显示当前页面的浏览进度"><a href="#3-8-显示当前页面的浏览进度" class="headerlink" title="3.8 显示当前页面的浏览进度"></a>3.8 显示当前页面的浏览进度</h3><p>在主题配置文件中 <code>ctrl+f</code> 搜索 <code>scrollpercent</code>，将 <code>false</code> 改为 <code>true</code>。如果想把 <code>top</code>按钮放在侧边栏，可以把 <code>b2t</code>字段设置为<code>true</code> ，实现效果如图所示：  </p><p><img src="/2018/09/22/GitHub-Pages-Hexo-Next博客搭建记录/scroll.png" alt="scroll">  <img src="/2018/09/22/GitHub-Pages-Hexo-Next博客搭建记录/percent.png" alt="percent"></p><h3 id="3-9-首页博文自动卷起"><a href="#3-9-首页博文自动卷起" class="headerlink" title="3.9 首页博文自动卷起"></a>3.9 首页博文自动卷起</h3><p>在首页显示一篇文章的部分内容，并提供一个链接跳转到全文页面是一个常见的需求。NexT 提供三种方式来控制文章在首页的显示方式。也就是说，在首页显示文章的摘录并显示 <strong>阅读全文</strong> 按钮，可以通过以下方法：  </p><ul><li><p>在文章中使用 <code>&lt;!-- more --&gt;</code> 手动进行截断，Hexo 提供的方式</p></li><li><p>在文章的 <a href="https://hexo.io/docs/front-matter.html" target="_blank" rel="noopener">front-matter</a>中添加 <code>description</code>，并提供文章摘录</p></li><li><p>自动形成摘要，在<strong>主题配置文件</strong>中将 <code>auto_excerpt</code>设置成 <code>true</code> ，并自行设定自动截取长度（默认150）</p></li></ul><p>这里，我们使用第一种方式，实现效果如下图：  </p><p><img src="/2018/09/22/GitHub-Pages-Hexo-Next博客搭建记录/more_press.png" alt="阅读全文"></p><h3 id="3-10-实现鼠标点击出现桃心"><a href="#3-10-实现鼠标点击出现桃心" class="headerlink" title="3.10 实现鼠标点击出现桃心"></a>3.10 实现鼠标点击出现桃心</h3><p>将 <a href="https://link.jianshu.com?t=https://github.com/Neveryu/Neveryu.github.io/blob/master/js/src/love.js" target="_blank" rel="noopener">love.js</a>文件添加到<strong>主题目录</strong>的<code>\source\js\src</code> 下，找到 <code>\themes\next\layout\_layout.swig</code>文件， 在文件的后面， <code>&lt;/body&gt;</code>标签之前 添加以下代码：  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 页面点击小红心 --&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"/js/src/love.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>实现效果为每次鼠标点击页面的时候，会出现一个彩色的桃心，如下图所示：  </p><p><img src="/2018/09/22/GitHub-Pages-Hexo-Next博客搭建记录/love.png" alt="桃心"></p><h3 id="3-11-添加站内搜索"><a href="#3-11-添加站内搜索" class="headerlink" title="3.11 添加站内搜索"></a>3.11 添加站内搜索</h3><p>NexT主题支持多种搜索插件，我们这里使用 <code>hexo-generator-searchdb</code>插件，原理是在本地生成一个<code>search.xml</code>文件，搜索的时候从这个文件中根据关键字检索出相应的链接。首先执行 <code>npm install hexo-generatordb --save</code> 指令进行插件的安装，之后将下面的代码复制进<strong>站点配置文件</strong>的末尾。  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">    path: search.xml</span><br><span class="line">    field: post</span><br><span class="line">    format: html</span><br><span class="line">    limit: <span class="number">10000</span></span><br></pre></td></tr></table></figure><p>然后将主题配置文件中的对应字段设置为 <code>true</code> 即可。</p><p><img src="/2018/09/22/GitHub-Pages-Hexo-Next博客搭建记录/search.png" alt="设置搜索字段的值"></p><p>最终，会在网站的侧栏出现<code>搜索</code> 选项，搜索效果如下图所示： </p><p><img src="/2018/09/22/GitHub-Pages-Hexo-Next博客搭建记录/search_press.png" alt="搜索效果图"></p><h3 id="3-12-生成站点地图"><a href="#3-12-生成站点地图" class="headerlink" title="3.12 生成站点地图"></a>3.12 生成站点地图</h3><p>站点地图是一种文件，可以通过该文件列出网站上的网页，从而可以将个人网站内容的组织架构告知 <code>baidu</code>、<code>google</code>等搜索引擎。搜索引擎的网页爬取工具会读取此文件，以便更加高效的爬取个人网站。</p><p>1、先安装对应的插件，以下两个插件对应的是 <code>baidu</code> 和 <code>google</code>  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure><p>2、在<strong>站点配置文件</strong>中添加如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># auto create sitemap</span><br><span class="line">sitemap:</span><br><span class="line">path: sitemap.xml</span><br><span class="line">baidusitemap:</span><br><span class="line">path: baidusitemap.xml</span><br></pre></td></tr></table></figure><p>运行指令 <code>hexo g -d</code>  ，在public目录下会发现生成了 <code>sitemap.xml</code> 和 <code>baidusitemap.xml</code> 两个文件，这表示成功了。接下来就是如何操作让百度、谷歌收录我们的博客了。</p><p>3、站点收录，由于并没有想被搜索引擎检索的需求，私下里自己先玩一玩，所以，此项，To Do….</p><h3 id="3-13-实现统计功能"><a href="#3-13-实现统计功能" class="headerlink" title="3.13 实现统计功能"></a>3.13 实现统计功能</h3><p>在Hexo的根目录下执行 <code>npm install hexo-wordcount --save</code>   指令，进行字数统计模块的安装，然后修改主题配置文件，将对应的开关打开，即 <code>false</code> 改为<code>true</code>。</p><p><img src="/2018/09/22/GitHub-Pages-Hexo-Next博客搭建记录/wordcount.png" alt="wordcount"></p><p>使用 <code>sublime</code>打开文件 <code>\themes\next\layout\_macro\post.swig</code> ，<code>ctrl+f</code>搜索如下代码字段，并在后面添加<code>字</code>、<code>分钟</code>。  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">title</span>=<span class="string">"&#123;&#123; __('post.wordcount') &#125;&#125;"</span>&gt;</span></span><br><span class="line">    &#123;&#123; wordcount(post.content) &#125;&#125; 字</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">title</span>=<span class="string">"&#123;&#123; __('post.min2read') &#125;&#125;"</span>&gt;</span></span><br><span class="line">    &#123;&#123; min2read(post.content) &#125;&#125; 分钟</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最终的效果图，如下： </p><p><img src="/2018/09/22/GitHub-Pages-Hexo-Next博客搭建记录/wordcount_press.png" alt="字数统计效果展示"></p><h3 id="3-14-上传本地图片"><a href="#3-14-上传本地图片" class="headerlink" title="3.14 上传本地图片"></a>3.14 上传本地图片</h3><p>在<strong>站点配置文件</strong>中将 <code>post_asset_folder</code>字段设置为 <code>true</code>，同时安装对应的插件 <code>npm install hexo-asset-image --save</code>。以后运行<code>hexo n &quot;xxxx&quot;</code>来生成md博文时，<code>/source/_posts</code>文件夹内除了<code>xxxx.md</code>文件还有一个同名的文件夹，该文件夹用于存储本地图片。在<code>xxxx.md</code>中想引入图片时，先把图片复制到xxxx这个文件夹中，然后只需要在xxxx.md中按照markdown的格式引入图片：<code>![你想输入的替代文字](xxxx\图片名.jpg)</code>  </p><h3 id="3-15-添加近期文章模块"><a href="#3-15-添加近期文章模块" class="headerlink" title="3.15 添加近期文章模块"></a>3.15 添加近期文章模块</h3><p>将下面的代码贴在 <code>next/layout/_macro/sidebar.swig</code> 中的 <code>if theme.links</code> 对应的 <code>endif</code> 后面，就ok了，是不是很简单。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if theme.recent_posts %&#125;</span><br><span class="line">    &lt;div class=&quot;links-of-blogroll motion-element &#123;&#123; &quot;links-of-blogroll-&quot; + theme.recent_posts_layout  &#125;&#125;&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;links-of-blogroll-title&quot;&gt;</span><br><span class="line">        &lt;!-- modify icon to fire by szw --&gt;</span><br><span class="line">        &lt;i class=&quot;fa fa-history fa-&#123;&#123; theme.recent_posts_icon | lower &#125;&#125;&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;</span><br><span class="line">        &#123;&#123; theme.recent_posts_title &#125;&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;ul class=&quot;links-of-blogroll-list&quot;&gt;</span><br><span class="line">        &#123;% set posts = site.posts.sort(&apos;-date&apos;) %&#125;</span><br><span class="line">        &#123;% for post in posts.slice(&apos;0&apos;, &apos;5&apos;) %&#125;</span><br><span class="line">          &lt;li&gt;</span><br><span class="line">            &lt;a href=&quot;&#123;&#123; url_for(post.path) &#125;&#125;&quot; title=&quot;&#123;&#123; post.title &#125;&#125;&quot; target=&quot;_blank&quot;&gt;&#123;&#123; post.title &#125;&#125;&lt;/a&gt;</span><br><span class="line">          &lt;/li&gt;</span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>为了配置方便，在主题的 <code>_config.yml</code> 中添加了几个变量，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">recent_posts_title: 近期文章</span><br><span class="line">recent_posts_layout: block</span><br><span class="line">recent_posts: true</span><br></pre></td></tr></table></figure><h3 id="3-16-右上角加fork-me-on-github"><a href="#3-16-右上角加fork-me-on-github" class="headerlink" title="3.16 右上角加fork me on github"></a>3.16 右上角加fork me on github</h3><p>点击<a href="http://tholman.com/github-corners/" target="_blank" rel="noopener">这里</a>或者<a href="https://github.com/blog/273-github-ribbons" target="_blank" rel="noopener">这里</a>挑选你喜欢的样式，修改成你的GitHub链接，复制到<code>themes/next/layout/_layout.swig</code>文件中的以下位置：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"&#123;&#123; container_class &#125;&#125; &#123;% block page_class %&#125;&#123;% endblock %&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"headband"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&lt;a href="https://github.com/wangjibao" ......&lt;/a&gt;</span><br></pre></td></tr></table></figure><h3 id="3-17-添加-latex-数学公式支持"><a href="#3-17-添加-latex-数学公式支持" class="headerlink" title="3.17 添加 latex 数学公式支持"></a>3.17 添加 latex 数学公式支持</h3><p>在 <code>next</code> 主题中，已经自动支持 <code>mathjax</code> 了，只需要在配置文件中将开关打开即可，不用像很多博客说的换<code>markdown</code>渲染引擎，更改<code>markdown</code>和<code>latex</code>的语法冲突，安装<code>mathjax</code>插件等等那么麻烦。</p><p>在主题配置文件中搜索 <code>mathjax</code> ，将开关设置为 <code>true</code> ，其中的 <code>per_page</code>字段如果设置为 <code>true</code> ，那么只有主页和文章头部带有<code>mathjax: true</code> 字段的博文才会加载 <code>mathjax</code>引擎。这里注意下，要更改默认的 <code>cdn</code> 地址，之前的地址已经停用了。</p><p>详见：<a href="https://github.com/iissnan/hexo-theme-next/pull/1712" target="_blank" rel="noopener">https://github.com/iissnan/hexo-theme-next/pull/1712</a></p><p>　　　<a href="https://github.com/iissnan/hexo-theme-next/pull/887" target="_blank" rel="noopener">https://github.com/iissnan/hexo-theme-next/pull/887</a></p><h2 id="4、集成第三方服务"><a href="#4、集成第三方服务" class="headerlink" title="4、集成第三方服务"></a>4、集成第三方服务</h2><h3 id="4-1-Valine评论系统"><a href="#4-1-Valine评论系统" class="headerlink" title="4.1 Valine评论系统"></a>4.1 Valine评论系统</h3><p>针对评论系统来讲的话，多说和网易云已经倒了，畅言需要备案，Disqus，Hypercomments和LiveRe等都是国外的，不仅加载速度慢还容易被墙，找来找去，决定使用valine（2017年8月诞生的一款基于<code>LeanCloud</code>的极简风评论系统）。<code>NexT</code>主题本身就已经集成了valine，所以设置起来也比较简单。  </p><h4 id="4-1-1-注册LeanCloud，获取appid和appkey"><a href="#4-1-1-注册LeanCloud，获取appid和appkey" class="headerlink" title="4.1.1 注册LeanCloud，获取appid和appkey"></a>4.1.1 注册LeanCloud，获取<code>appid</code>和<code>appkey</code></h4><p>在<a href="https://leancloud.cn/" target="_blank" rel="noopener">官网</a>注册账号并<code>创建应用</code>，应用选择<code>开发版</code>即可，毕竟穷孩子，免费的好啊。应用名字随便起，创建完成后，在 <code>设置 &gt;&gt; 应用key</code> 中可以看到此应用的appid和appkey。</p><p><img src="/2018/09/22/GitHub-Pages-Hexo-Next博客搭建记录/appkey.png" alt="appid和appkey"></p><h4 id="4-1-2-配置web安全域名"><a href="#4-1-2-配置web安全域名" class="headerlink" title="4.1.2 配置web安全域名"></a>4.1.2 配置web安全域名</h4><p>为了数据安全，在 <code>设置 &gt;&gt; 安全中心</code>中设置web安全域名，如下图：</p><p><img src="/2018/09/22/GitHub-Pages-Hexo-Next博客搭建记录/web_security.png" alt="web域名安全"></p><h4 id="4-1-3-创建Class对象"><a href="#4-1-3-创建Class对象" class="headerlink" title="4.1.3 创建Class对象"></a>4.1.3 创建<code>Class</code>对象</h4><p>在 <code>存储 &gt;&gt; 数据</code>栏中，创建两个<code>Class</code>，一个名为<code>Counter</code>，用于记录统计每篇博文的阅读次数；另一名为<code>Comment</code>用于记录存储每篇博文的评论。注意，此处两个<code>Class</code>的名字是固定的，不能更改。</p><p><img src="/2018/09/22/GitHub-Pages-Hexo-Next博客搭建记录/class.png" alt="创建Class"></p><p>可以手动修改 <code>Counter</code>表中<code>time</code>字段的值，也就是修改了博文的阅读次数，美滋滋~~~</p><h4 id="4-1-4-修改主题配置文件"><a href="#4-1-4-修改主题配置文件" class="headerlink" title="4.1.4 修改主题配置文件"></a>4.1.4 修改<code>主题配置文件</code></h4><p>搜索 <code>leancloud</code>字段，将 <code>enable</code>字段设置为 <code>true</code>，<code>app_id</code>和<code>app_key</code>填写之前获得的值，此时，就可以在页面中启用博文阅读次数统计功能。</p><p><img src="/2018/09/22/GitHub-Pages-Hexo-Next博客搭建记录/valine.png" alt="valine配置文件修改"></p><p>搜索<code>valine</code>字段，将 <code>enable</code>字段设置为 <code>true</code>，<code>app_id</code>和<code>app_key</code>填写之前获得的值，此时，就可以在页面中启用博文评论及回复功能。其中的<code>notify</code>字段代表有评论时邮件提醒，<code>verify</code>字段代表开启验证码，<code>avatar</code>代表评论者的头像，<code>placeholder</code>字段代表初始评论框中显示的文字，等等。。。</p><h4 id="4-1-5-最终效果展示"><a href="#4-1-5-最终效果展示" class="headerlink" title="4.1.5 最终效果展示"></a>4.1.5 最终效果展示</h4><p>后台数据管理：</p><p><img src="/2018/09/22/GitHub-Pages-Hexo-Next博客搭建记录/guanli.png" alt="后台数据管理"></p><p>阅读次数统计：</p><p><img src="/2018/09/22/GitHub-Pages-Hexo-Next博客搭建记录/counter.png" alt="阅读次数统计"></p><p>底部评论区：</p><p><img src="/2018/09/22/GitHub-Pages-Hexo-Next博客搭建记录/comment.png" alt="评论区"></p><h4 id="4-1-6-邮件提醒功能配置"><a href="#4-1-6-邮件提醒功能配置" class="headerlink" title="4.1.6 邮件提醒功能配置"></a>4.1.6 邮件提醒功能配置</h4><p>至此，已经能够使用评论系统了，但它虽然支持邮件提醒（基于密码重置提醒邮件），功能却很弱，无法提示到具体文章，也无法给评论者进行有效的回复通知，通常别人留完言，怎么还会再来你的博客看你是否回复了呢？所以，这里我们引用GitHub上某位大佬的<a href="https://github.com/panjunwen/Valine-Admin" target="_blank" rel="noopener">配置</a>，它满足了：</p><ul><li>完善的邮件通知，自定义 SMTP 发件频率和内容不再受限</li><li>基于 Akismet 的垃圾评论自动标注和过滤</li><li>评论管理，避免直接操作数据库</li><li>……</li></ul><p>邮件效果如下图所示：</p><p><img src="/2018/09/22/GitHub-Pages-Hexo-Next博客搭建记录/mail_press.png" alt="邮件展示"></p><p>管理界面如下图：</p><p><img src="/2018/09/22/GitHub-Pages-Hexo-Next博客搭建记录/comment_press.png" alt="评论管理"></p><h3 id="4-2-卜算子统计"><a href="#4-2-卜算子统计" class="headerlink" title="4.2 卜算子统计"></a>4.2 卜算子统计</h3><p>在<code>主题配置文件</code>中搜索 <code>busuanzi_count</code>，将开关打开，并做如下图修改，即可统计站点的 <code>UV</code>和<code>PV</code>：</p><p><img src="/2018/09/22/GitHub-Pages-Hexo-Next博客搭建记录/busuanzi.png" alt="卜算子统计"></p><p>实现效果如下图：</p><p><img src="/2018/09/22/GitHub-Pages-Hexo-Next博客搭建记录/busuanzi_press.png" alt="站点统计"></p><p>第一行的 <code>Site words total count</code>很是刺眼，改！之前的leancloud留下来的历史问题。在 <code>\themes\next\layout\_partials\footer.swig</code>中第19行做如下修改：  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#&#125;&#123;&#123; totalcount(site, '0,0.0a') &#125;&#125; 字&#123;#</span><br></pre></td></tr></table></figure><p>在<code>\themes\next\language\zh-Hans.yml</code>文件中，修改第36行，如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#修改前：</span><br><span class="line">　　totalcount: Site words total count</span><br><span class="line">#修改后：</span><br><span class="line">　　totalcount: 本站共计</span><br></pre></td></tr></table></figure><h2 id="5、To-DO-List"><a href="#5、To-DO-List" class="headerlink" title="5、To DO List"></a>5、To DO List</h2><ul><li><p>侧边栏添加日历</p><p>点击查看<a href="https://github.com/icecory/Hexo-Next-Plugins-Calendar" target="_blank" rel="noopener">教程链接</a></p></li><li><p>SEO优化</p></li><li><p>CND优化</p></li><li><p>静态资源压缩（github pages提供的免费空间有限）</p></li><li><p>添加动态萌宠</p><p>先安装必要的模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br><span class="line">npm install live2d-widget-model-hijiki  #此行不同的萌宠，对应不同的模块</span><br></pre></td></tr></table></figure><p>在站点配置文件的末尾添加如下代码段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># live2d    </span><br><span class="line">live2d:</span><br><span class="line">  enable: true</span><br><span class="line">  scriptFrom: local</span><br><span class="line">  pluginRootPath: live2dw/</span><br><span class="line">  pluginJsPath: lib/</span><br><span class="line">  pluginModelPath: assets/</span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-hijiki/</span><br><span class="line">  display:</span><br><span class="line">    position: left</span><br><span class="line">    width: 80</span><br><span class="line">    height: 300</span><br><span class="line">    hOffset: 20 #水平相对位移</span><br><span class="line">    vOffset: -200 #垂直相对位移</span><br><span class="line">  mobile:</span><br><span class="line">    show: true</span><br></pre></td></tr></table></figure></li><li><p>代码区添加<code>点击复制</code>按钮</p></li><li><p>隐私博文加密访问</p></li><li><p>设置背景及透明度</p><p>打开 <code>\themes\next\source\css\_custom\custom.styl</code>文件，添加如下代码即可：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">　　<span class="attribute">background</span>:<span class="built_in">url</span>(https://source.unsplash.com/random/1920x1080);    </span><br><span class="line">　　<span class="attribute">background-repeat</span>: repeat;    </span><br><span class="line">　　<span class="attribute">background-attachment</span>:fixed;    </span><br><span class="line">　　<span class="attribute">background-position</span>:<span class="number">50%</span> <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line">//改变背景色和透明度</span><br><span class="line"><span class="selector-class">.main-inner</span> &#123;</span><br><span class="line">　　<span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">　　<span class="attribute">opacity</span>: <span class="number">0.9</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加网易云音乐</p><p>在网易云音乐网页版，找到自己想要的歌曲，点击生成播放外链，生成如下所示的代码，将<code>iframe</code>模块放到主题中 <code>layout/_macro/sidebar.swig</code>文件的适当位置即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=298 height=52 src=&quot;//music.163.com/outchain/player?type=2&amp;id=570240588&amp;auto=0&amp;height=32&quot;&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure></li><li><p>个性化字体设置–设置代码块字体大小</p><p>NexT 从 <strong>5.0.1</strong> 版本开始提供一个 <a href="https://theme-next.iissnan.com/theme-settings.html#fonts-customization" target="_blank" rel="noopener">字体定制特性</a>，编辑主题下的 <code>source/css/_variables/custom.styl</code> 文件，新增如下代码：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 代码字体的大小</span><br><span class="line">$code-font-size = 15px</span><br></pre></td></tr></table></figure></li><li><p>文章顶部添加最近更新时间</p><p>在<code>主题设置文件</code>中搜索<code>update</code>，将其设置为<code>true</code>即可。</p></li><li><p>个性设置文章间分割线</p></li><li><p>取消博文段落自动编号</p><p>将主题配置文件中的 <code>toc ：number</code> 字段设置为 <code>false</code></p></li><li><p>安装PDF插件</p><p>执行命令 <code>npm install hexo-pdf --save</code>，之后编辑博客的时候即可使用 标签：<img src="/2018/09/22/GitHub-Pages-Hexo-Next博客搭建记录/pdf.png" alt="">引用本地的pdf文件。</p></li><li><p>。。。。。。</p></li></ul><h2 id="6、bug解决"><a href="#6、bug解决" class="headerlink" title="6、bug解决"></a>6、bug解决</h2><h3 id="6-1-busuanzi统计失效问题"><a href="#6-1-busuanzi统计失效问题" class="headerlink" title="6.1 busuanzi统计失效问题"></a>6.1 busuanzi统计失效问题</h3><p>前往 <a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">http://busuanzi.ibruce.info/</a> 卜算子官网，可以发现有提示说 <code>因七牛强制过期『dn-lbstatics.qbox.me』域名，与客服沟通无果，只能更换域名到『busuanzi.ibruce.info』！</code>。所以接下来的bug修复工作就十分简单了。在主题文件 <code>themes/next/layout/_third-party/analytics/busuanzi-counter.swig</code> 文件中，将 <code>&lt;script&gt;</code> 标签中的 <code>src</code>字段改为：</p><p><code>src=&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;</code> 即可解决。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、前言&quot;&gt;&lt;a href=&quot;#1、前言&quot; class=&quot;headerlink&quot; title=&quot;1、前言&quot;&gt;&lt;/a&gt;1、前言&lt;/h2&gt;&lt;p&gt;　　大二的时候看见学长搭建的个人博客，感觉好高大上的样子，想着自己啥时候不再是哪个只会喊：&lt;strong&gt;哇、牛批、666、厉害厉害&lt;/strong&gt;的傻逼选手，然后浪啊浪，突然有一天，CSP考试上考到了一个Markdown转HTML的大模拟题：&lt;br&gt;&lt;img src=&quot;/2018/09/22/GitHub-Pages-Hexo-Next博客搭建记录/CSP.png&quot; alt=&quot;计算机软件能力认证考试系统&quot;&gt;现场狂写2小时，黑箱测试最后只得20分，从此心理对MD留下了挥之不去的阴影，然后就没有了然后，此事不来了了之。大二的时候在&lt;a href=&quot;https://blog.csdn.net/spring371327&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CSDN&lt;/a&gt;上写过，但是感觉CSDN的广告是越来也严重了，上面，下面，左面，右面等等四面八方全是各种广告，于是乎，时隔三年，趁着中秋没钱出去浪啊，舍友也回家了，丧尸宿舍也搭建一个简单的个人博客吧，此文简单记录一下搭建过程。&lt;br&gt;本文使用的是 &lt;a href=&quot;https://pages.github.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Github pages&lt;/a&gt; + &lt;a href=&quot;https://hexo.io/zh-cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt; + &lt;a href=&quot;http://theme-next.iissnan.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Next &lt;/a&gt;主题。      &lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://wangjibao.com.cn/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="https://wangjibao.com.cn/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
